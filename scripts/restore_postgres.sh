#!/bin/bash

# ===========================================
# PostgreSQL Full Restore Script
# Function: Restore roles + all databases
# Dependency: Directory structure generated by complete backup script
# Author: Your Helper
# Please modify configuration before use
# ===========================================

# ============= Configuration Section =============
# Backup directory (contains roles_and_tablespaces.sql and .dump files)
BACKUP_DIR="/Users/wlg/Downloads/backup_db/backup_20250801_165108"

PGUSER="${PGUSER:-postgres}"      # Default restore user (needs permission to create roles and databases)
PGHOST="${PGHOST:-localhost}"
PGPORT="${PGPORT:-5432}"

# Log file
LOG_FILE="$BACKUP_DIR/restore_full_$(date +%Y%m%d_%H%M%S).log"
exec > >(tee -i "$LOG_FILE")
exec 2>&1

# ============= Script Start =============
echo "„ÄêFull Restore Started„ÄëTime: $(date)"
echo "Backup directory: $BACKUP_DIR"
echo "Target database host: $PGHOST:$PGPORT, restore user: $PGUSER"
echo

# ============= 1. Check backup directory =============
if [ ! -d "$BACKUP_DIR" ]; then
    echo "‚ùå Error: Backup directory does not exist!"
    echo "   Path: $BACKUP_DIR"
    exit 1
fi

# ============= 2. Restore roles and tablespaces =============
ROLE_FILE="$BACKUP_DIR/roles_and_tablespaces.sql"
if [ ! -f "$ROLE_FILE" ]; then
    echo "‚ö†Ô∏è Warning: Role backup file not found!"
    echo "   File path: $ROLE_FILE"
    echo "   If you're sure you don't need to restore roles, you can skip this step."
    read -p "Continue to restore databases? (y/N): " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]] || exit 0
else
    echo "„Äê1/2„ÄëRestoring roles and tablespaces..."
    echo "Using file: $ROLE_FILE"

    read -p "Confirm role restore? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Role restore skipped."
    else
        psql \
          --host="$PGHOST" \
          --port="$PGPORT" \
          --username="$PGUSER" \
          --dbname="postgres" \
          --file="$ROLE_FILE"

        if [ $? -eq 0 ]; then
            echo "‚úÖ Roles and tablespaces restore successful"
        else
            echo "‚ùå Role restore failed, please check log: $LOG_FILE"
            exit 1
        fi
    fi
fi

# ============= 3. Restore all databases =============
echo
echo "„Äê2/2„ÄëRestoring all databases..."

# Find all .dump files
DUMP_FILES=$(find "$BACKUP_DIR" -type f -name "*.dump")

if [ -z "$DUMP_FILES" ]; then
    echo "‚ùå Error: No .dump files found!"
    echo "   Please confirm that the backup directory contains database dump files."
    exit 1
fi

echo "Found the following database backup files:"
echo "$DUMP_FILES"
echo

# Restore each database
for dump_file in $DUMP_FILES; do
    db_name=$(basename "$dump_file" | sed -E 's/_backup_[0-9]{14}\.dump$//; s/_backup_[0-9]{8}_[0-9]{6}\.dump$//')
    if [ "$db_name" == "postgres" ]; then
        echo "‚ö†Ô∏è Skipping system database: postgres (recommended to restore manually)"
        continue
    fi

    echo "‚û°Ô∏è Restoring database: $db_name"
    echo "   File: $dump_file"

    # Create database (if not exists)
    echo "   Creating database (if not exists): $db_name"
    createdb -h "$PGHOST" -p "$PGPORT" -U "$PGUSER" "$db_name" 2>/dev/null || echo "‚ö†Ô∏è Database '$db_name' may already exist, will attempt to restore"

    # Execute restore
    pg_restore \
      --host="$PGHOST" \
      --port="$PGPORT" \
      --username="$PGUSER" \
      --dbname="$db_name" \
      --verbose \
      "$dump_file"

    if [ $? -eq 0 ]; then
        echo "‚úÖ Database '$db_name' restore successful"
    else
        echo "‚ùå Database '$db_name' restore failed, please check log: $LOG_FILE"
        exit 1
    fi
done

# ============= 4. Completion prompt =============
echo
echo "„ÄêRestore Complete„ÄëTime: $(date)"
echo "üìå Recommended follow-up operations:"
echo "1. Check role list: psql -U $PGUSER -c \"\\du\""
echo "2. Check database list: psql -U $PGUSER -c \"\\l\""
echo "3. Check if each database is normal: psql -U $PGUSER -d your_db -c \"\\dt\""
