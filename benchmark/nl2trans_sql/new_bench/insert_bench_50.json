[
    {
        "question_id": 98,
        "db_id": "financial",
        "question": "\"Insert into the AccountsLowestLoan1997 table the account ID of the account that has the lowest approved loan amount in 1997 and is set to receive weekly issuance statements.\"",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "SQL": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO AccountsLowestLoan1997 (account_id) SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount NULLS FIRST LIMIT 1",
        "result_size": 1,
        "result": "(176,)",
        "base_pg_sql": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount NULLS FIRST LIMIT 1",
        "base_question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "base_evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "pre_pg_sql": "\n          CREATE TABLE AccountsLowestLoan1997 (\n                  account_id BIGINT\n          );\n          ",
        "post_pg_sql": "DROP TABLE AccountsLowestLoan1997;",
        "gt": {
            "type": "insert",
            "table": "AccountsLowestLoan1997",
            "columns": [
                "account_id"
            ],
            "values": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE TO_CHAR(CAST(T1.date AS TIMESTAMP), 'YYYY') = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount NULLS FIRST LIMIT 1"
        }
    },
    {
        "question_id": 1373,
        "db_id": "student_club",
        "question": "Insert the count of members whose hometowns are in Maryland state into the MarylandMembersCount table.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO MarylandMembersCount (member_count) SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "result_size": 1,
        "result": "(3,)",
        "base_pg_sql": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'",
        "base_question": "How many of the members' hometowns are from Maryland state?",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE MarylandMembersCount (\n                  member_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE MarylandMembersCount;",
        "gt": {
            "type": "insert",
            "table": "MarylandMembersCount",
            "columns": [
                "member_count"
            ],
            "values": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'"
        }
    },
    {
        "question_id": 597,
        "db_id": "codebase_community",
        "question": "\"Insert the count of users from India who hold the Teacher badge into the IndiaTeacherBadgeUsers table.\"",
        "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
        "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO IndiaTeacherBadgeUsers (user_count) SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
        "result_size": 1,
        "result": "(18,)",
        "base_pg_sql": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'",
        "base_question": "How many users from India have the teacher badges?",
        "base_evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge",
        "pre_pg_sql": "\n          CREATE TABLE IndiaTeacherBadgeUsers (\n                  user_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE IndiaTeacherBadgeUsers;",
        "gt": {
            "type": "insert",
            "table": "IndiaTeacherBadgeUsers",
            "columns": [
                "user_count"
            ],
            "values": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'"
        }
    },
    {
        "question_id": 45,
        "db_id": "california_schools",
        "question": "\"Insert the average writing scores for each of the schools managed by Ricci Ulrich into the SchoolAverageWritingScores table. Include the school name and its corresponding average writing score.\"",
        "evidence": "Usually, administrators manage the school stuff.",
        "SQL": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO SchoolAverageWritingScores (School, AvgScrWrite) SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "result_size": 1,
        "result": "('Buchanan High', 507)",
        "base_pg_sql": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'",
        "base_question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores.",
        "base_evidence": "Usually, administrators manage the school stuff.",
        "pre_pg_sql": "\n          CREATE TABLE SchoolAverageWritingScores (\n                  School TEXT,\n    AvgScrWrite BIGINT\n          );\n          ",
        "post_pg_sql": "DROP TABLE SchoolAverageWritingScores;",
        "gt": {
            "type": "insert",
            "table": "SchoolAverageWritingScores",
            "columns": [
                "School",
                "AvgScrWrite"
            ],
            "values": "SELECT T2.School, T1.AvgScrWrite FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.AdmFName1 = 'Ricci' AND T2.AdmLName1 = 'Ulrich'"
        }
    },
    {
        "question_id": 444,
        "db_id": "card_games",
        "question": "\"Add the names and types of all cards with a 'boros' watermark that have corresponding foreign data entries to the BorosWatermarkCards table.\"",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO BorosWatermarkCards (name, type) SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "result_size": 95,
        "result": "('Agrus Kos, Wojek Veteran', 'Legendary Creature \u2014 Human Soldier')####('Arrows of Justice', 'Instant')####('Assemble the Legion', 'Enchantment')####('Aurelia, Exemplar of Justice', 'Legendary Creature \u2014 Angel')####(\"Aurelia's Fury\", 'Instant')####('Aurelia, the Warleader', 'Legendary Creature \u2014 Angel')####('Barging Sergeant', 'Creature \u2014 Minotaur Soldier')####('Bathe in Light', 'Instant')####('Blade Instructor', 'Creature \u2014 Human Soldier')####('Blaze Commando', 'Creature \u2014 Minotaur Soldier')####('Bomber Corps', 'Creature \u2014 Human Soldier')####('Boros Battleshaper', 'Creature \u2014 Minotaur Soldier')####('Boros Challenger', 'Creature \u2014 Human Soldier')####('Boros Charm', 'Instant')####('Boros Cluestone', 'Artifact')####('Boros Elite', 'Creature \u2014 Human Soldier')####('Boros Fury-Shield', 'Instant')####('Boros Garrison', 'Land')####('Boros Guildgate', 'Land \u2014 Gate')####('Boros Guildmage', 'Creature \u2014 Human Wizard')####('Boros Keyrune', 'Artifact')####('Boros Locket', 'Artifact')####('Boros Mastiff', 'Creature \u2014 Dog')####('Boros Reckoner', 'Creature \u2014 Minotaur Wizard')####('Boros Recruit', 'Creature \u2014 Goblin Soldier')####('Boros Signet', 'Artifact')####('Boros Swiftblade', 'Creature \u2014 Human Soldier')####('Brightflame', 'Sorcery')####('Chance for Glory', 'Instant')####('Cleansing Beam', 'Instant')####('Daring Skyjek', 'Creature \u2014 Human Knight')####('Deafening Clarion', 'Sorcery')####('Firefist Striker', 'Creature \u2014 Human Soldier')####('Firemane Angel', 'Creature \u2014 Angel')####('Firemane Avenger', 'Creature \u2014 Angel')####('Flame-Kin Zealot', 'Creature \u2014 Elemental Berserker')####('Flash Conscription', 'Instant')####('Fortress Cyclops', 'Creature \u2014 Cyclops Soldier')####('Foundry Champion', 'Creature \u2014 Elemental Soldier')####('Fresh-Faced Recruit', 'Creature \u2014 Human Soldier')####('Frontline Medic', 'Creature \u2014 Human Cleric')####('Garrison Sergeant', 'Creature \u2014 Viashino Soldier')####('Gleam of Battle', 'Enchantment')####('Goblin Banneret', 'Creature \u2014 Goblin Soldier')####('Hammer Dropper', 'Creature \u2014 Giant Soldier')####('Hide // Seek', 'Instant')####('Incite Hysteria', 'Sorcery')####('Integrity // Intervention', 'Instant')####('Justice Strike', 'Instant')####('Leave No Trace', 'Instant')####('Legion Guildmage', 'Creature \u2014 Human Wizard')####('Legion Loyalist', 'Creature \u2014 Goblin Soldier')####(\"Legion's Initiative\", 'Enchantment')####('Legion Warboss', 'Creature \u2014 Goblin Soldier')####('Lightning Helix', 'Instant')####('Light of the Legion', 'Creature \u2014 Angel')####('Martial Glory', 'Instant')####('Master Warcraft', 'Instant')####('Nav Squad Commandos', 'Creature \u2014 Human Soldier')####('Ordruun Commando', 'Creature \u2014 Minotaur Soldier')####('Ordruun Veteran', 'Creature \u2014 Minotaur Soldier')####('Parhelion Patrol', 'Creature \u2014 Human Knight')####('Rally the Righteous', 'Instant')####('Razia, Boros Archangel', 'Legendary Creature \u2014 Angel')####(\"Razia's Purification\", 'Sorcery')####('Response // Resurgence', 'Instant')####('Response // Resurgence', 'Sorcery')####('Sacred Foundry', 'Land \u2014 Mountain Plains')####('Screeching Griffin', 'Creature \u2014 Griffin')####('Searing Meditation', 'Enchantment')####('Shattering Blow', 'Instant')####('Skyknight Legionnaire', 'Creature \u2014 Human Knight')####('Spark Trooper', 'Creature \u2014 Elemental Soldier')####('Sunforger', 'Artifact \u2014 Equipment')####('Sunhome Enforcer', 'Creature \u2014 Giant Soldier')####('Sunhome, Fortress of the Legion', 'Land')####('Sunhome Guildmage', 'Creature \u2014 Human Wizard')####('Sunhome Stalwart', 'Creature \u2014 Human Soldier')####('Surge of Zeal', 'Instant')####('Swathcutter Giant', 'Creature \u2014 Giant Soldier')####('Swiftblade Vindicator', 'Creature \u2014 Human Soldier')####('Tajic, Blade of the Legion', 'Legendary Creature \u2014 Human Soldier')####(\"Tajic, Legion's Edge\", 'Legendary Creature \u2014 Human Soldier')####('Thundersong Trumpeter', 'Creature \u2014 Human Soldier')####('Towering Thunderfist', 'Creature \u2014 Giant Soldier')####('Truefire Captain', 'Creature \u2014 Human Knight')####('Truefire Paladin', 'Creature \u2014 Human Knight')####('Viashino Firstblade', 'Creature \u2014 Viashino Soldier')####(\"Warleader's Helix\", 'Instant')####('Warmind Infantry', 'Creature \u2014 Elemental Soldier')####('Wojek Apothecary', 'Creature \u2014 Human Cleric')####('Wojek Bodyguard', 'Creature \u2014 Human Soldier')####('Wojek Embermage', 'Creature \u2014 Human Wizard')####('Wojek Halberdiers', 'Creature \u2014 Human Soldier')####('Wojek Siren', 'Instant')",
        "base_pg_sql": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "base_question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE BorosWatermarkCards (\n                  name TEXT,\n    type TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE BorosWatermarkCards;",
        "gt": {
            "type": "insert",
            "table": "BorosWatermarkCards",
            "columns": [
                "name",
                "type"
            ],
            "values": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'"
        }
    },
    {
        "question_id": 288,
        "db_id": "toxicology",
        "question": "Insert the carcinogenic label of the molecule that contains atom TR001_1 into the MoleculeCarcinogenicFlag table.",
        "evidence": "label = '+' mean molecules are carcinogenic;",
        "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO MoleculeCarcinogenicFlag (label) SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "result_size": 1,
        "result": "('+',)",
        "base_pg_sql": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'",
        "base_question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.",
        "base_evidence": "label = '+' mean molecules are carcinogenic;",
        "pre_pg_sql": "\n          CREATE TABLE MoleculeCarcinogenicFlag (\n                  label TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE MoleculeCarcinogenicFlag;",
        "gt": {
            "type": "insert",
            "table": "MoleculeCarcinogenicFlag",
            "columns": [
                "label"
            ],
            "values": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'"
        }
    },
    {
        "question_id": 321,
        "db_id": "toxicology",
        "question": "Insert the molecule ID into the MoleculeBondDetails table for the molecule that contains atom \"TR000_2\" connected to atom \"TR000_4\".",
        "evidence": "",
        "SQL": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO MoleculeBondDetails (molecule_id) SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
        "result_size": 1,
        "result": "('TR000',)",
        "base_pg_sql": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'",
        "base_question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE MoleculeBondDetails (\n                  molecule_id TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE MoleculeBondDetails;",
        "gt": {
            "type": "insert",
            "table": "MoleculeBondDetails",
            "columns": [
                "molecule_id"
            ],
            "values": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'"
        }
    },
    {
        "question_id": 580,
        "db_id": "codebase_community",
        "question": "\"Add the display names of 10 users who have been awarded the 'Necromancer' badge to the NecromancerUsers table.\"",
        "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO NecromancerUsers (DisplayName) SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "result_size": 10,
        "result": "('whuber',)####('whuber',)####('conjugateprior',)####('chl',)####('Tal Galili',)####('user603',)####('Tal Galili',)####('Adam',)####('vqv',)####('\u0397\u03bb\u03af\u03b1\u03c2',)",
        "base_pg_sql": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10",
        "base_question": "Name 10 users with the badge name 'Necromancer.'",
        "base_evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName",
        "pre_pg_sql": "\n          CREATE TABLE NecromancerUsers (\n                  DisplayName TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE NecromancerUsers;",
        "gt": {
            "type": "insert",
            "table": "NecromancerUsers",
            "columns": [
                "DisplayName"
            ],
            "values": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10"
        }
    },
    {
        "question_id": 524,
        "db_id": "card_games",
        "question": "Add all distinct artists who illustrated cards with black borders and are available only in arena to the ArenaBlackBorderArtists table.",
        "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO ArenaBlackBorderArtists (artist) SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "result_size": 212,
        "result": "('Aaron Miller',)####('Adam Paquette',)####('Adam Rex',)####('Adi Granov',)####('Adrian Majkrzak',)####('Alayna Danner',)####('Aleksi Briclot',)####('Alex Konstad',)####('Allen Williams',)####('Anastasia Ovchinnikova',)####('Anna Pavleeva',)####('Anna Steinbauer',)####('Anthony Francisco',)####('Anthony Palumbo',)####('Anthony S. Waters',)####('Antonio Jos\u00e9 Manzanedo',)####('Austin Hsu',)####('Bastien L. Deharme',)####('Ben Thompson',)####('Ben Wootten',)####('Bob Eggleton',)####('Brad Rigney',)####('Bram Sels',)####('Brom',)####('Caio Monteiro',)####('Carl Critchlow',)####('Chase Stone',)####('Chris Rahn',)####('Chris Rallis',)####('Chris Seaman',)####('Christine Choi',)####('Christopher Burdett',)####('Christopher Moeller',)####('Christopher Rush',)####('Cliff Childs',)####('Clint Cearley',)####('Colin Boyer',)####('Colin MacNeil',)####('Craig J Spearing',)####('Cyril Van Der Haegen',)####('Daarken',)####('D. Alexander Gregory',)####('Daniel Ljunggren',)####('Dan Scott',)####('Dany Orizio',)####('Darek Zabrocki',)####('Daren Bader',)####('Dave Dorman',)####('Dave Kendall',)####('David Gaillet',)####('David Martin',)####('David Palumbo',)####('David Rapoza',)####('Denman Rooke',)####('Deruchenko Alexander',)####('Dmitry Burmak',)####('Donato Giancola',)####('Douglas Shuler',)####('Edward P. Beard, Jr.',)####('Efflam Mercier',)####('E. M. Gist',)####('Eric Deschamps',)####('Eric Peterson',)####('Eric Velhagen',)####('Evan Shipard',)####('Even Amundsen',)####('Eytan Zana',)####('Filip Burburan',)####('Florian de Gesincourt',)####('Franz Vohwinkel',)####('Gabor Szikszai',)####('G-host Lee',)####('Greg Opalinski',)####('Greg Staples',)####('Grzegorz Rutkowski',)####('Heather Hudson',)####('Heonhwa Choe',)####('Howard Lyon',)####('Igor Kieryluk',)####('Izzy',)####('Jack Wang',)####('Jaime Jones',)####('Jakub Kasper',)####('James Paick',)####('James Ryman',)####('Jana Schirmer & Johannes Voss',)####('Jarel Threat',)####('Jason A. Engle',)####('Jason Felix',)####('Jason Kang',)####('Jason Rainville',)####('Jeff Miracola',)####('Jeff Simpson',)####('Jenn Ravenna Tran',)####('Jeremy Wilson',)####('Jesper Ejsing',)####('Jim Nelson',)####('Johann Bodin',)####('Johannes Voss',)####('John Avon',)####('John Di Giovanni',)####('John Severin Brassell',)####('John Silva',)####('John Stanko',)####('John Thacker',)####('Jonas De Ro',)####('Jonathan Kuo',)####('Joseph Meehan',)####('Josh Hass',)####('Josu Hernaiz',)####('J.P. Targete',)####('Jung Park',)####('Karl Kopinski',)####(\"Kasia 'Kafis' Zieli\u0144ska\",)####('Kev Walker',)####('Kieran Yanner',)####('Kim Sokol',)####('Lake Hurwitz',)####('Lars Grant-West',)####('Lawrence Snelly',)####('Lie Setiawan',)####('Lindsey Look',)####('Lius Lasahido',)####('Livia Prima',)####('Lucas Graciano',)####('Luca Zontini',)####('Magali Villeneuve',)####('Manuel Casta\u00f1\u00f3n',)####('Mark Behm',)####('Mark Poole',)####('Mark Zug',)####('Martina Pilcerova',)####('Massimilano Frezzato',)####('Mathias Kollros',)####('Matt Cavotta',)####('Matt Stewart',)####('Michael Komarck',)####('Mike Bierek',)####('Mike Burns',)####('Mike Ploog',)####('Milivoj \u0106eran',)####('Min Yum',)####('Nestor Ossandon Leal',)####('Nils Hamm',)####('Noah Bradley',)####('Omar Rayyan',)####('Paul Scott Canavan',)####('Peter Mohrbacher',)####('Pete Venters',)####('Ralph Horsley',)####('Randy Gallegos',)####('Randy Vargas',)####('Raoul Vitale',)####('Ray Lago',)####('Raymond Swanland',)####('Rebecca Guay',)####('Richard Wright',)####('Rob Alexander',)####('Robbie Trevino',)####('Ron Spears',)####('Rudy Siswanto',)####('Ryan Alexander Lee',)####('Ryan Pancoast',)####('Ryan Yee',)####('Sam Burley',)####('Sara Winters',)####('Scott Bailey',)####('Scott M. Fischer',)####('Scott Murphy',)####('Sean Murray',)####('Seb McKinnon',)####('Shreya Shetty',)####('Sidharth Chaturvedi',)####('Simon Dominic',)####('Slawomir Maniak',)####('Steve Argyle',)####('Steven Belledin',)####('Steve Prescott',)####('Sung Choi',)####('Suzanne Helmigh',)####('Svetlin Velinov',)####('Terese Nielsen',)####('Tingting Yeh',)####('Titus Lunter',)####('Todd Lockwood',)####('Tomasz Jedruszek',)####('Tommy Arnold',)####('Tom W\u00e4nerstrand',)####('Tony Foti',)####('Tony Roberts',)####('Tony Szczudlo',)####('Toraji',)####('Tyler Jacobson',)####('Uriah Voth',)####('Valera Lutfullina',)####('Vance Kovacs',)####('V\u00e9ronique Meignaud',)####('Victor Adame Minguez',)####('Viktor Titov',)####('Vincent Proce',)####('Volkan Ba\u01f5a',)####('Wayne Reynolds',)####('Wesley Burt',)####('Willian Murai',)####('Winona Nelson',)####('Yeong-Hao Han',)####('Yigit Koroglu',)####('Yongjae Choi',)####('YW Tang',)####('Zack Stella',)####('Zezhou Chen',)####('Zoltan Boros',)",
        "base_pg_sql": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'",
        "base_question": "List the artists who illustrated cards with black borders which are available only in arena.",
        "base_evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'",
        "pre_pg_sql": "\n          CREATE TABLE ArenaBlackBorderArtists (\n                  artist TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE ArenaBlackBorderArtists;",
        "gt": {
            "type": "insert",
            "table": "ArenaBlackBorderArtists",
            "columns": [
                "artist"
            ],
            "values": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'"
        }
    },
    {
        "question_id": 111,
        "db_id": "financial",
        "question": "Insert the number of accounts that were opened in the district of Litomerice in 1996 into the table AccountsOpenedIn1996.",
        "evidence": "A2 refers to district name; Litomerice is one of district names.",
        "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO AccountsOpenedIn1996 (account_count) SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE TO_CHAR(CAST(T2.date AS TIMESTAMP), 'YYYY') = '1996' AND T1.A2 = 'Litomerice'",
        "result_size": 1,
        "result": "(9,)",
        "base_pg_sql": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE TO_CHAR(CAST(T2.date AS TIMESTAMP), 'YYYY') = '1996' AND T1.A2 = 'Litomerice'",
        "base_question": "How many accounts were opened in Litomerice in 1996?",
        "base_evidence": "A2 refers to district name; Litomerice is one of district names.",
        "pre_pg_sql": "\n          CREATE TABLE AccountsOpenedIn1996 (\n                  account_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE AccountsOpenedIn1996;",
        "gt": {
            "type": "insert",
            "table": "AccountsOpenedIn1996",
            "columns": [
                "account_count"
            ],
            "values": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE TO_CHAR(CAST(T2.date AS TIMESTAMP), 'YYYY') = '1996' AND T1.A2 = 'Litomerice'"
        }
    },
    {
        "question_id": 207,
        "db_id": "toxicology",
        "question": "Insert all distinct elements that are involved in double type bonds into the ElementsInDoubleBond table.",
        "evidence": "double type bond refers to bond_type = '=';",
        "SQL": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "difficulty": "challenging",
        "pg_sql": "INSERT INTO ElementsInDoubleBond (element) SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "result_size": 14,
        "result": "('sn',)####('ca',)####('cu',)####('p',)####('h',)####('cl',)####('o',)####('s',)####('c',)####('br',)####('te',)####('n',)####('f',)####('pb',)",
        "base_pg_sql": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='",
        "base_question": "What elements are in a double type bond?",
        "base_evidence": "double type bond refers to bond_type = '=';",
        "pre_pg_sql": "\n          CREATE TABLE ElementsInDoubleBond (\n                  element TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE ElementsInDoubleBond;",
        "gt": {
            "type": "insert",
            "table": "ElementsInDoubleBond",
            "columns": [
                "element"
            ],
            "values": "SELECT DISTINCT T1.element FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.bond_type = '='"
        }
    },
    {
        "question_id": 1519,
        "db_id": "debit_card_specializing",
        "question": "Insert the product ID of the transaction that occurred at a gas station on August 23rd, 2012 at 21:20:00 into the ProductIDTransactions table.",
        "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database",
        "SQL": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO ProductIDTransactions (ProductID) SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "result_size": 1,
        "result": "(2,)",
        "base_pg_sql": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "base_question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
        "base_evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database",
        "pre_pg_sql": "\n          CREATE TABLE ProductIDTransactions (\n                  ProductID BIGINT\n          );\n          ",
        "post_pg_sql": "DROP TABLE ProductIDTransactions;",
        "gt": {
            "type": "insert",
            "table": "ProductIDTransactions",
            "columns": [
                "ProductID"
            ],
            "values": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'"
        }
    },
    {
        "question_id": 132,
        "db_id": "financial",
        "question": "\"Insert the average loan amount taken by male borrowers into the AverageMaleBorrowerLoanAmount table.\"",
        "evidence": "Male refers to gender = 'M'",
        "SQL": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO AverageMaleBorrowerLoanAmount (avg_loan_amount) SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "result_size": 1,
        "result": "(Decimal('149609.180487804878'),)",
        "base_pg_sql": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "base_question": "What is the average loan amount by male borrowers?",
        "base_evidence": "Male refers to gender = 'M'",
        "pre_pg_sql": "\n          CREATE TABLE AverageMaleBorrowerLoanAmount (\n                  avg_loan_amount NUMERIC\n          );\n          ",
        "post_pg_sql": "DROP TABLE AverageMaleBorrowerLoanAmount;",
        "gt": {
            "type": "insert",
            "table": "AverageMaleBorrowerLoanAmount",
            "columns": [
                "avg_loan_amount"
            ],
            "values": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'"
        }
    },
    {
        "question_id": 808,
        "db_id": "superhero",
        "question": "Insert into the SuperheroRace table the race of the superhero who weighs 108kg and is 188cm tall.",
        "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;",
        "SQL": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO SuperheroRace (race) SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "result_size": 2,
        "result": "('-',)####('Human',)",
        "base_pg_sql": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188",
        "base_question": "Find the race of the superhero who weighs 108kg and is 188cm tall.",
        "base_evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;",
        "pre_pg_sql": "\n          CREATE TABLE SuperheroRace (\n                  race TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE SuperheroRace;",
        "gt": {
            "type": "insert",
            "table": "SuperheroRace",
            "columns": [
                "race"
            ],
            "values": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"
        }
    },
    {
        "question_id": 628,
        "db_id": "codebase_community",
        "question": "\"Add the users with the highest number of views to the TopViewedUsers table, capturing their Id and DisplayName.\"",
        "evidence": "",
        "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO TopViewedUsers (Id, DisplayName) SELECT Id, DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "result_size": 1,
        "result": "(919, 'whuber')",
        "base_pg_sql": "SELECT Id, DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)",
        "base_question": "Which users have the highest number of views?",
        "base_evidence": "users have the highest number of views refer to DisplayName where MAX(Views);",
        "pre_pg_sql": "\n          CREATE TABLE TopViewedUsers (\n                  Id BIGINT,\n    DisplayName TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE TopViewedUsers;",
        "gt": {
            "type": "insert",
            "table": "TopViewedUsers",
            "columns": [
                "Id",
                "DisplayName"
            ],
            "values": "SELECT Id, DisplayName FROM users WHERE Views = (SELECT MAX(Views) FROM users)"
        }
    },
    {
        "question_id": 86,
        "db_id": "california_schools",
        "question": "Add the administrator's last name, district, county, and school name to the SchoolAdministratorInfo table for the school with Charter number 40.",
        "evidence": "",
        "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO SchoolAdministratorInfo (AdmLName1, District, County, School) SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "result_size": 1,
        "result": "('Aguilar', 'San Francisco Unified', 'San Francisco', 'Creative Arts Charter')",
        "base_pg_sql": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "base_question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE SchoolAdministratorInfo (\n                  AdmLName1 TEXT,\n    District TEXT,\n    County TEXT,\n    School TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE SchoolAdministratorInfo;",
        "gt": {
            "type": "insert",
            "table": "SchoolAdministratorInfo",
            "columns": [
                "AdmLName1",
                "District",
                "County",
                "School"
            ],
            "values": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'"
        }
    },
    {
        "question_id": 263,
        "db_id": "toxicology",
        "question": "\"Insert the percentage composition of chlorine atoms among all atoms in molecules with single bonds into the ChlorineComposition table.\"",
        "evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / COUNT(T.atom_id) FROM ( SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T",
        "difficulty": "challenging",
        "pg_sql": "INSERT INTO ChlorineComposition (chlorine_percentage) SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T.atom_id), 0) FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-') AS T",
        "result_size": 1,
        "result": "(2.6840451814272206,)",
        "base_pg_sql": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T.atom_id), 0) FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-') AS T",
        "base_question": "What is the composition of element chlorine in percentage among the single bond molecules?",
        "base_evidence": "element chlorine refers to element = 'cl'; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(element = 'cl'), COUNT(atom_id)) as percent where bond_type = '-'",
        "pre_pg_sql": "\n          CREATE TABLE ChlorineComposition (\n                  chlorine_percentage REAL\n          );\n          ",
        "post_pg_sql": "DROP TABLE ChlorineComposition;",
        "gt": {
            "type": "insert",
            "table": "ChlorineComposition",
            "columns": [
                "chlorine_percentage"
            ],
            "values": "SELECT CAST(COUNT(CASE WHEN T.element = 'cl' THEN T.atom_id ELSE NULL END) AS REAL) * 100 / NULLIF(COUNT(T.atom_id), 0) FROM (SELECT T1.atom_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-') AS T"
        }
    },
    {
        "question_id": 718,
        "db_id": "superhero",
        "question": "Insert the count of superheroes who have the super power of \"Super Strength\" into the SuperStrengthHeroesCount table.",
        "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
        "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO SuperStrengthHeroesCount (super_strength_heroes_count) SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "result_size": 1,
        "result": "(358,)",
        "base_pg_sql": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'",
        "base_question": "How many superheroes have the super power of \"Super Strength\"?",
        "base_evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'",
        "pre_pg_sql": "\n          CREATE TABLE SuperStrengthHeroesCount (\n                  super_strength_heroes_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE SuperStrengthHeroesCount;",
        "gt": {
            "type": "insert",
            "table": "SuperStrengthHeroesCount",
            "columns": [
                "super_strength_heroes_count"
            ],
            "values": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'"
        }
    },
    {
        "question_id": 383,
        "db_id": "card_games",
        "question": "Insert the count of banned cards with white borders into the BannedWhiteBorderCardsCount table.",
        "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
        "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO BannedWhiteBorderCardsCount (banned_white_border_cards_count) SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "result_size": 1,
        "result": "(258,)",
        "base_pg_sql": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'",
        "base_question": "How many of the banned cards are white border?",
        "base_evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';",
        "pre_pg_sql": "\n          CREATE TABLE BannedWhiteBorderCardsCount (\n                  banned_white_border_cards_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE BannedWhiteBorderCardsCount;",
        "gt": {
            "type": "insert",
            "table": "BannedWhiteBorderCardsCount",
            "columns": [
                "banned_white_border_cards_count"
            ],
            "values": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'"
        }
    },
    {
        "question_id": 1303,
        "db_id": "thrombosis_prediction",
        "question": "Insert the birthday of the oldest patient with abnormal blood glucose into the OldestPatientAbnormalGlucose table.",
        "evidence": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;",
        "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO OldestPatientAbnormalGlucose (Birthday) SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC NULLS FIRST LIMIT 1",
        "result_size": 1,
        "result": "(datetime.date(1923, 7, 25),)",
        "base_pg_sql": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC NULLS FIRST LIMIT 1",
        "base_question": "When is the birthday of the oldest patient whose blood glucose is abnormal?",
        "base_evidence": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;",
        "pre_pg_sql": "\n          CREATE TABLE OldestPatientAbnormalGlucose (\n                  Birthday DATE\n          );\n          ",
        "post_pg_sql": "DROP TABLE OldestPatientAbnormalGlucose;",
        "gt": {
            "type": "insert",
            "table": "OldestPatientAbnormalGlucose",
            "columns": [
                "Birthday"
            ],
            "values": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC NULLS FIRST LIMIT 1"
        }
    },
    {
        "question_id": 1471,
        "db_id": "debit_card_specializing",
        "question": "\"Insert the ratio of customers who pay in EUR against customers who pay in CZK into the CurrencyRatio table.\"",
        "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
        "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO CurrencyRatio (ratio) SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) AS ratio FROM customers",
        "result_size": 1,
        "result": "(0.06572769953051644,)",
        "base_pg_sql": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) AS ratio FROM customers",
        "base_question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
        "base_evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
        "pre_pg_sql": "\n          CREATE TABLE CurrencyRatio (\n                  ratio REAL\n          );\n          ",
        "post_pg_sql": "DROP TABLE CurrencyRatio;",
        "gt": {
            "type": "insert",
            "table": "CurrencyRatio",
            "columns": [
                "ratio"
            ],
            "values": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / NULLIF(SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END), 0) AS ratio FROM customers"
        }
    },
    {
        "question_id": 649,
        "db_id": "codebase_community",
        "question": "Insert the post history IDs and their corresponding last edit dates into the PostHistoryDetails table for all post history records associated with the post titled \"What is the best introductory Bayesian statistics textbook?\"",
        "evidence": "",
        "SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO PostHistoryDetails (Id, LastEditDate) SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "result_size": 12,
        "result": "(281, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(8150, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(259, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(260, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(261, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(262, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(1345, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(1323, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(3256, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(8151, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(8152, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))####(65562, datetime.datetime(2012, 1, 22, 12, 18, 28, tzinfo=datetime.timezone.utc))",
        "base_pg_sql": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'",
        "base_question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE PostHistoryDetails (\n                  Id BIGINT,\n    LastEditDate TIMESTAMP\n          );\n          ",
        "post_pg_sql": "DROP TABLE PostHistoryDetails;",
        "gt": {
            "type": "insert",
            "table": "PostHistoryDetails",
            "columns": [
                "Id",
                "LastEditDate"
            ],
            "values": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'"
        }
    },
    {
        "question_id": 1246,
        "db_id": "thrombosis_prediction",
        "question": "\"Insert the count of distinct patients who have an abnormal activated partial prothrombin time (APTT > 45) and do not have thrombosis (Thrombosis = 0) into the AbnormalAPTTNoThrombosisCount table under the patient_count column.\"",
        "evidence": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive.",
        "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO AbnormalAPTTNoThrombosisCount (patient_count) SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
        "result_size": 1,
        "result": "(2,)",
        "base_pg_sql": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45",
        "base_question": "For the patients with an abnormal activated partial prothrom bin time, how many of them does not have thrombosis?",
        "base_evidence": "abnormal activated partial prothrom bin time refers to APTT > 45; does not have thrombosis refers to Thrombosis = 0; Only count ones without repetitive.",
        "pre_pg_sql": "\n          CREATE TABLE AbnormalAPTTNoThrombosisCount (\n                  patient_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE AbnormalAPTTNoThrombosisCount;",
        "gt": {
            "type": "insert",
            "table": "AbnormalAPTTNoThrombosisCount",
            "columns": [
                "patient_count"
            ],
            "values": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID INNER JOIN Examination AS T3 ON T3.ID = T2.ID WHERE T3.Thrombosis = 0 AND T2.APTT > 45"
        }
    },
    {
        "question_id": 215,
        "db_id": "toxicology",
        "question": "Insert the count of distinct iodine and sulfur atoms involved in single bonds into the ElementCountsInSingleBonds table.",
        "evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "SQL": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums , COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "difficulty": "challenging",
        "pg_sql": "INSERT INTO ElementCountsInSingleBonds (iodine_nums, sulfur_nums) SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums, COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "result_size": 1,
        "result": "(6, 92)",
        "base_pg_sql": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums, COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'",
        "base_question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?",
        "base_evidence": "with iodine element refer to element = 'i'; with sulfur element refers to element = 's'; single type bond refers to bond_type = '-'; Should consider the distinct atoms when counting;",
        "pre_pg_sql": "\n          CREATE TABLE ElementCountsInSingleBonds (\n                  iodine_nums INTEGER,\n    sulfur_nums INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE ElementCountsInSingleBonds;",
        "gt": {
            "type": "insert",
            "table": "ElementCountsInSingleBonds",
            "columns": [
                "iodine_nums",
                "sulfur_nums"
            ],
            "values": "SELECT COUNT(DISTINCT CASE WHEN T1.element = 'i' THEN T1.atom_id ELSE NULL END) AS iodine_nums, COUNT(DISTINCT CASE WHEN T1.element = 's' THEN T1.atom_id ELSE NULL END) AS sulfur_nums FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '-'"
        }
    },
    {
        "question_id": 526,
        "db_id": "card_games",
        "question": "\"Insert the number of cards designed by Matthew D. Wilson that are available only in paper format into the WilsonPaperCardsCount table under the card_count column.\"",
        "evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'",
        "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO WilsonPaperCardsCount (card_count) SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "result_size": 1,
        "result": "(38,)",
        "base_pg_sql": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'",
        "base_question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?",
        "base_evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'",
        "pre_pg_sql": "\n          CREATE TABLE WilsonPaperCardsCount (\n                  card_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE WilsonPaperCardsCount;",
        "gt": {
            "type": "insert",
            "table": "WilsonPaperCardsCount",
            "columns": [
                "card_count"
            ],
            "values": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'"
        }
    },
    {
        "question_id": 1527,
        "db_id": "debit_card_specializing",
        "question": "Insert the gas station with the highest amount of revenue into the TopRevenueGasStation table.",
        "evidence": "",
        "SQL": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO TopRevenueGasStation (GasStationID) SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC NULLS LAST LIMIT 1",
        "result_size": 1,
        "result": "(4347,)",
        "base_pg_sql": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC NULLS LAST LIMIT 1",
        "base_question": "Which gas station has the highest amount of revenue?",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE TopRevenueGasStation (\n                  GasStationID BIGINT\n          );\n          ",
        "post_pg_sql": "DROP TABLE TopRevenueGasStation;",
        "gt": {
            "type": "insert",
            "table": "TopRevenueGasStation",
            "columns": [
                "GasStationID"
            ],
            "values": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC NULLS LAST LIMIT 1"
        }
    },
    {
        "question_id": 705,
        "db_id": "codebase_community",
        "question": "Insert the reputation and up vote count into the UserReputationUpVotes table for the user who commented \"fine, you win :)\".",
        "evidence": "Text = 'fine, you win :)';",
        "SQL": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO UserReputationUpVotes (Reputation, UpVotes) SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
        "result_size": 1,
        "result": "(2316, 74)",
        "base_pg_sql": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'",
        "base_question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".",
        "base_evidence": "Text = 'fine, you win :)';",
        "pre_pg_sql": "\n          CREATE TABLE UserReputationUpVotes (\n                  Reputation BIGINT,\n    UpVotes BIGINT\n          );\n          ",
        "post_pg_sql": "DROP TABLE UserReputationUpVotes;",
        "gt": {
            "type": "insert",
            "table": "UserReputationUpVotes",
            "columns": [
                "Reputation",
                "UpVotes"
            ],
            "values": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'"
        }
    },
    {
        "question_id": 415,
        "db_id": "card_games",
        "question": "Insert the percentage of commander-format cards with legal status that do not have a content warning into the CommanderLegalCardsPercentage table under the percentage_without_content_warning column.",
        "evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "difficulty": "challenging",
        "pg_sql": "INSERT INTO CommanderLegalCardsPercentage (percentage_without_content_warning) SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "result_size": 1,
        "result": "(100.0,)",
        "base_pg_sql": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'",
        "base_question": "What percentage of cards with format commander and legal status do not have a content warning?",
        "base_evidence": "do not have a content warning refers to hasContentWarning = 0; percentage refers to DIVIDE(COUNT(hasContentWarning = 0),COUNT(ID))*100 where format = 'commander' AND Status = 'legal';",
        "pre_pg_sql": "\n          CREATE TABLE CommanderLegalCardsPercentage (\n                  percentage_without_content_warning REAL\n          );\n          ",
        "post_pg_sql": "DROP TABLE CommanderLegalCardsPercentage;",
        "gt": {
            "type": "insert",
            "table": "CommanderLegalCardsPercentage",
            "columns": [
                "percentage_without_content_warning"
            ],
            "values": "SELECT CAST(SUM(CASE WHEN T1.hasContentWarning = 0 THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.id), 0) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.format = 'commander' AND T2.status = 'Legal'"
        }
    },
    {
        "question_id": 1256,
        "db_id": "thrombosis_prediction",
        "question": "Insert the number of patients with an abnormal C-reactive protein who don't have their data recorded into the AbnormalCRPNoDescriptionCount table.",
        "evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+' ) AND T1.Description IS NULL",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO AbnormalCRPNoDescriptionCount (count) SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL",
        "result_size": 1,
        "result": "(208,)",
        "base_pg_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL",
        "base_question": "How many patients with a abnormal C-reactive protein don't have their data recorded?",
        "base_evidence": "abnormal C-reactive protein refers to CRP ='+'; don't have data recorded refers to Description IS NULL;",
        "pre_pg_sql": "\n          CREATE TABLE AbnormalCRPNoDescriptionCount (\n                  count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE AbnormalCRPNoDescriptionCount;",
        "gt": {
            "type": "insert",
            "table": "AbnormalCRPNoDescriptionCount",
            "columns": [
                "count"
            ],
            "values": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE (T2.CRP = '+') AND T1.Description IS NULL"
        }
    },
    {
        "question_id": 1496,
        "db_id": "debit_card_specializing",
        "question": "Insert the client segment that consumed the least in September 2013 into the LowestConsumingSegment table.",
        "evidence": "September 2013 refers to yearmonth.date = '201309'",
        "SQL": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO LowestConsumingSegment (Segment) SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC NULLS FIRST LIMIT 1",
        "result_size": 1,
        "result": "('KAM',)",
        "base_pg_sql": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC NULLS FIRST LIMIT 1",
        "base_question": "Which client segment consumed the least in September 2013?",
        "base_evidence": "September 2013 refers to yearmonth.date = '201309'",
        "pre_pg_sql": "\n          CREATE TABLE LowestConsumingSegment (\n                  Segment TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE LowestConsumingSegment;",
        "gt": {
            "type": "insert",
            "table": "LowestConsumingSegment",
            "columns": [
                "Segment"
            ],
            "values": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC NULLS FIRST LIMIT 1"
        }
    },
    {
        "question_id": 673,
        "db_id": "codebase_community",
        "question": "\"Insert the average number of posts voted by the oldest users into the 'avg_post_id' column of the 'AveragePostsByOldestUsers' table.\"",
        "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
        "SQL": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO AveragePostsByOldestUsers (avg_post_id) SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))",
        "result_size": 1,
        "result": "(Decimal('170.0000000000000000'),)",
        "base_pg_sql": "SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))",
        "base_question": "What is the average number of posts voted by the oldest users?",
        "base_evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);",
        "pre_pg_sql": "\n          CREATE TABLE AveragePostsByOldestUsers (\n                  avg_post_id NUMERIC\n          );\n          ",
        "post_pg_sql": "DROP TABLE AveragePostsByOldestUsers;",
        "gt": {
            "type": "insert",
            "table": "AveragePostsByOldestUsers",
            "columns": [
                "avg_post_id"
            ],
            "values": "SELECT AVG(PostId) FROM votes WHERE UserId IN (SELECT Id FROM users WHERE Age = (SELECT MAX(Age) FROM users))"
        }
    },
    {
        "question_id": 376,
        "db_id": "card_games",
        "question": "Add the layouts of all cards that have the keyword 'Flying' into the CardLayouts table.",
        "evidence": "",
        "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO CardLayouts (layout) SELECT layout FROM cards WHERE keywords = 'Flying'",
        "result_size": 3088,
        "result": "('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('adventure',)####('adventure',)####('normal',)####('normal',)####('normal',)####('adventure',)####('adventure',)####('adventure',)####('normal',)####('normal',)####('normal',)####('adventure',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('adventure',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('adventure',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('normal',)####('normal',)####('normal',)####('flip',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('host',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('transform',)####('transform',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('flip',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)####('normal',)",
        "base_pg_sql": "SELECT layout FROM cards WHERE keywords = 'Flying'",
        "base_question": "What are the card layout of cards with keyword of flying?",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE CardLayouts (\n                  layout TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE CardLayouts;",
        "gt": {
            "type": "insert",
            "table": "CardLayouts",
            "columns": [
                "layout"
            ],
            "values": "SELECT layout FROM cards WHERE keywords = 'Flying'"
        }
    },
    {
        "question_id": 1514,
        "db_id": "debit_card_specializing",
        "question": "\"Add all distinct currencies used by customers who made transactions at gas stations on August 24, 2012, at 16:25:00 to the PaymentCurrency table.\"",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
        "SQL": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO PaymentCurrency (Currency) SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "result_size": 1,
        "result": "('CZK',)",
        "base_pg_sql": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "base_question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
        "base_evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
        "pre_pg_sql": "\n          CREATE TABLE PaymentCurrency (\n                  Currency TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE PaymentCurrency;",
        "gt": {
            "type": "insert",
            "table": "PaymentCurrency",
            "columns": [
                "Currency"
            ],
            "values": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'"
        }
    },
    {
        "question_id": 809,
        "db_id": "superhero",
        "question": "\"Insert the publisher name of the superhero with ID 38 into the PublisherName table.\"",
        "evidence": "superhero ID 38 refers to superhero.id = 38;",
        "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO PublisherName (publisher_name) SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "result_size": 1,
        "result": "('DC Comics',)",
        "base_pg_sql": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38",
        "base_question": "What is the publisher name of the superhero ID 38?",
        "base_evidence": "superhero ID 38 refers to superhero.id = 38;",
        "pre_pg_sql": "\n          CREATE TABLE PublisherName (\n                  publisher_name TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE PublisherName;",
        "gt": {
            "type": "insert",
            "table": "PublisherName",
            "columns": [
                "publisher_name"
            ],
            "values": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38"
        }
    },
    {
        "question_id": 1438,
        "db_id": "student_club",
        "question": "Insert the college of the person named Katy who has a link to the major with ID \"rec1N0upiVLy5esTO\" into the KatyCollegeInfo table.",
        "evidence": "",
        "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO KatyCollegeInfo (college) SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "result_size": 1,
        "result": "('College of Natural Resources',)",
        "base_pg_sql": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'",
        "base_question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE KatyCollegeInfo (\n                  college TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE KatyCollegeInfo;",
        "gt": {
            "type": "insert",
            "table": "KatyCollegeInfo",
            "columns": [
                "college"
            ],
            "values": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'"
        }
    },
    {
        "question_id": 359,
        "db_id": "card_games",
        "question": "Add the original type of the card \"Ancestor's Chosen\" to the CardTypes table, but only if this original type is not null.",
        "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
        "SQL": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO CardTypes (originalType) SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND NOT originalType IS NULL",
        "result_size": 3,
        "result": "('Creature - Cleric',)####('Creature \u2014 Human Cleric',)####('Creature - Human Cleric',)",
        "base_pg_sql": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND NOT originalType IS NULL",
        "base_question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?",
        "base_evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;",
        "pre_pg_sql": "\n          CREATE TABLE CardTypes (\n                  originalType TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE CardTypes;",
        "gt": {
            "type": "insert",
            "table": "CardTypes",
            "columns": [
                "originalType"
            ],
            "values": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND NOT originalType IS NULL"
        }
    },
    {
        "question_id": 182,
        "db_id": "financial",
        "question": "Insert the number of male customers born between 1974 and 1976 who have made a household payment exceeding $4000 into the MaleCustomerPayments table.",
        "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "SQL": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO MaleCustomerPayments (count_account_id) SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE TO_CHAR(CAST(T3.birth_date AS TIMESTAMP), 'YYYY') BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "result_size": 1,
        "result": "(1556,)",
        "base_pg_sql": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE TO_CHAR(CAST(T3.birth_date AS TIMESTAMP), 'YYYY') BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "base_question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
        "base_evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "pre_pg_sql": "\n          CREATE TABLE MaleCustomerPayments (\n                  count_account_id INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE MaleCustomerPayments;",
        "gt": {
            "type": "insert",
            "table": "MaleCustomerPayments",
            "columns": [
                "count_account_id"
            ],
            "values": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE TO_CHAR(CAST(T3.birth_date AS TIMESTAMP), 'YYYY') BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'"
        }
    },
    {
        "question_id": 133,
        "db_id": "financial",
        "question": "Insert the district ID and name of the district with the highest unemployment rate in 1996 into the HighestUnemploymentDistrict1996 table.",
        "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "SQL": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO HighestUnemploymentDistrict1996 (district_id, A2) SELECT district_id, A2 FROM district ORDER BY A13 DESC NULLS LAST LIMIT 1",
        "result_size": 1,
        "result": "(39, 'Most')",
        "base_pg_sql": "SELECT district_id, A2 FROM district ORDER BY A13 DESC NULLS LAST LIMIT 1",
        "base_question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "base_evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "pre_pg_sql": "\n          CREATE TABLE HighestUnemploymentDistrict1996 (\n                  district_id BIGINT,\n    A2 TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE HighestUnemploymentDistrict1996;",
        "gt": {
            "type": "insert",
            "table": "HighestUnemploymentDistrict1996",
            "columns": [
                "district_id",
                "A2"
            ],
            "values": "SELECT district_id, A2 FROM district ORDER BY A13 DESC NULLS LAST LIMIT 1"
        }
    },
    {
        "question_id": 1254,
        "db_id": "thrombosis_prediction",
        "question": "\"Insert the number of patients with a normal Ig A level who came to the hospital after 1990/1/1 into the PatientCount table under the patient_count column.\"",
        "evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
        "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND  strftime('%Y',  T1.`First Date`) > '1990'",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO PatientCount (patient_count) SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND TO_CHAR(CAST(T1.\"First Date\" AS TIMESTAMP), 'YYYY') > '1990'",
        "result_size": 1,
        "result": "(1590,)",
        "base_pg_sql": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND TO_CHAR(CAST(T1.\"First Date\" AS TIMESTAMP), 'YYYY') > '1990'",
        "base_question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?",
        "base_evidence": "normal Ig A level refers to IGA > 80 AND IGA < 500; came to the hospital after 1990/1/1 refers to YEAR(`First Date`) > = 1990;",
        "pre_pg_sql": "\n          CREATE TABLE PatientCount (\n                  patient_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE PatientCount;",
        "gt": {
            "type": "insert",
            "table": "PatientCount",
            "columns": [
                "patient_count"
            ],
            "values": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 AND TO_CHAR(CAST(T1.\"First Date\" AS TIMESTAMP), 'YYYY') > '1990'"
        }
    },
    {
        "question_id": 1453,
        "db_id": "student_club",
        "question": "\"Add the names of events with less than average parking cost to the EventsWithLowParkingCost table.\"",
        "evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO EventsWithLowParkingCost (event_name) SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "result_size": 3,
        "result": "('October Speaker',)####('September Speaker',)####('November Speaker',)",
        "base_pg_sql": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "base_question": "List the name of events with less than average parking cost.",
        "base_evidence": "name of events refers to event_name; less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'",
        "pre_pg_sql": "\n          CREATE TABLE EventsWithLowParkingCost (\n                  event_name TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE EventsWithLowParkingCost;",
        "gt": {
            "type": "insert",
            "table": "EventsWithLowParkingCost",
            "columns": [
                "event_name"
            ],
            "values": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)"
        }
    },
    {
        "question_id": 1387,
        "db_id": "student_club",
        "question": "\"Add the full name (first and last name) of the student who has been entrusted to manage the budget for the Yearly Kickoff event to the YearlyKickoffBudgetManagers table.\"",
        "evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "SQL": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO YearlyKickoffBudgetManagers (first_name, last_name) SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "result_size": 4,
        "result": "('Sacha', 'Harrison')####('Elijah', 'Allen')####('Elijah', 'Allen')####('Sacha', 'Harrison')",
        "base_pg_sql": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "base_question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "base_evidence": "name of students means the full name; full name refers to first_name, last_name;'Yearly Kickoff' is an event name;",
        "pre_pg_sql": "\n          CREATE TABLE YearlyKickoffBudgetManagers (\n                  first_name TEXT,\n    last_name TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE YearlyKickoffBudgetManagers;",
        "gt": {
            "type": "insert",
            "table": "YearlyKickoffBudgetManagers",
            "columns": [
                "first_name",
                "last_name"
            ],
            "values": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'"
        }
    },
    {
        "question_id": 737,
        "db_id": "superhero",
        "question": "Add the race of the superhero named 'Copycat' to the SuperheroRace table.",
        "evidence": "Copycat is the superhero_name;",
        "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO SuperheroRace (race) SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "result_size": 1,
        "result": "('Mutant',)",
        "base_pg_sql": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'",
        "base_question": "What is Copycat's race?",
        "base_evidence": "Copycat is the superhero_name;",
        "pre_pg_sql": "\n          CREATE TABLE SuperheroRace (\n                  race TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE SuperheroRace;",
        "gt": {
            "type": "insert",
            "table": "SuperheroRace",
            "columns": [
                "race"
            ],
            "values": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'"
        }
    },
    {
        "question_id": 691,
        "db_id": "codebase_community",
        "question": "Insert the count of adult users who have cast over 5000 upvotes into the AdultUsersUpVotes table under the adult_users_count column.",
        "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
        "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO AdultUsersUpVotes (adult_users_count) SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "result_size": 1,
        "result": "(2,)",
        "base_pg_sql": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000",
        "base_question": "Identify the number of adult users who have cast over 5000 upvotes.",
        "base_evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;",
        "pre_pg_sql": "\n          CREATE TABLE AdultUsersUpVotes (\n                  adult_users_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE AdultUsersUpVotes;",
        "gt": {
            "type": "insert",
            "table": "AdultUsersUpVotes",
            "columns": [
                "adult_users_count"
            ],
            "values": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000"
        }
    },
    {
        "question_id": 639,
        "db_id": "codebase_community",
        "question": "\"Insert the percentage of posts that use the R language among all posts made by the user named 'Community' into the CommunityPostsRPercentage table under the column percentage_r_posts.\"",
        "evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "SQL": "SELECT CAST(SUM(IIF(T3.TagName = 'r', 1, 0)) AS REAL) * 100 / COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "difficulty": "challenging",
        "pg_sql": "INSERT INTO CommunityPostsRPercentage (percentage_r_posts) SELECT CAST(SUM(CASE WHEN T3.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "result_size": 1,
        "result": "(0.19569471624266144,)",
        "base_pg_sql": "SELECT CAST(SUM(CASE WHEN T3.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'",
        "base_question": "Based on posts posted by Community, calculate the percentage of posts that use the R language.",
        "base_evidence": "DIVIDE(COUNT(PostId WHERE TagName = 'r')), (COUNT(PostId WHERE DisplayName = 'Community')) as percentage; R language refers to tagname = 'r'",
        "pre_pg_sql": "\n          CREATE TABLE CommunityPostsRPercentage (\n                  percentage_r_posts REAL\n          );\n          ",
        "post_pg_sql": "DROP TABLE CommunityPostsRPercentage;",
        "gt": {
            "type": "insert",
            "table": "CommunityPostsRPercentage",
            "columns": [
                "percentage_r_posts"
            ],
            "values": "SELECT CAST(SUM(CASE WHEN T3.TagName = 'r' THEN 1 ELSE 0 END) AS REAL) * 100 / NULLIF(COUNT(T1.Id), 0) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN tags AS T3 ON T3.ExcerptPostId = T2.PostId WHERE T1.DisplayName = 'Community'"
        }
    },
    {
        "question_id": 669,
        "db_id": "codebase_community",
        "question": "\"Insert the date when 'chl' cast their first vote into the ChlFirstVoteDate table.\"",
        "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO ChlFirstVoteDate (CreationDate) SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate NULLS FIRST LIMIT 1",
        "result_size": 1,
        "result": "(datetime.date(2010, 8, 13),)",
        "base_pg_sql": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate NULLS FIRST LIMIT 1",
        "base_question": "When did 'chl' cast its first vote in a post?",
        "base_evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);",
        "pre_pg_sql": "\n          CREATE TABLE ChlFirstVoteDate (\n                  CreationDate DATE\n          );\n          ",
        "post_pg_sql": "DROP TABLE ChlFirstVoteDate;",
        "gt": {
            "type": "insert",
            "table": "ChlFirstVoteDate",
            "columns": [
                "CreationDate"
            ],
            "values": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate NULLS FIRST LIMIT 1"
        }
    },
    {
        "question_id": 1313,
        "db_id": "student_club",
        "question": "\"Insert the count of Student_Club members who are from the College of Engineering into the EngineeringStudentsCount table.\"",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO EngineeringStudentsCount (student_count) SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "result_size": 1,
        "result": "(6,)",
        "base_pg_sql": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'",
        "base_question": "How many students in the Student_Club are from the College of Engineering?",
        "base_evidence": "",
        "pre_pg_sql": "\n          CREATE TABLE EngineeringStudentsCount (\n                  student_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE EngineeringStudentsCount;",
        "gt": {
            "type": "insert",
            "table": "EngineeringStudentsCount",
            "columns": [
                "student_count"
            ],
            "values": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'"
        }
    },
    {
        "question_id": 434,
        "db_id": "card_games",
        "question": "Insert the count of sets that are available in Japanese but not in Magic: The Gathering Online into the JapaneseOnlySetsCount table.",
        "evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''",
        "SQL": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese'  AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "difficulty": "moderate",
        "pg_sql": "INSERT INTO JapaneseOnlySetsCount (set_count) SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "result_size": 1,
        "result": "(22,)",
        "base_pg_sql": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')",
        "base_question": "How many sets are available just in Japanese and not in Magic: The Gathering Online?",
        "base_evidence": "Japanese refers to language = 'Japanese'; not in Magic: The Gathering Online refers to mtgoCode is null or mtgoCode = ''",
        "pre_pg_sql": "\n          CREATE TABLE JapaneseOnlySetsCount (\n                  set_count INTEGER\n          );\n          ",
        "post_pg_sql": "DROP TABLE JapaneseOnlySetsCount;",
        "gt": {
            "type": "insert",
            "table": "JapaneseOnlySetsCount",
            "columns": [
                "set_count"
            ],
            "values": "SELECT COUNT(T1.id) FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.language = 'Japanese' AND (T1.mtgoCode IS NULL OR T1.mtgoCode = '')"
        }
    },
    {
        "question_id": 715,
        "db_id": "codebase_community",
        "question": "Insert the display names into the FilteredUserComments table for users who have made comments with scores between 1 and 5 and have received zero down votes.",
        "evidence": "DownVotes = 0; Score BETWEEN 1 and 5",
        "SQL": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO FilteredUserComments (DisplayName) SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
        "result_size": 5476,
        "result": "('Farrel',)####('Nicojo',)####('mornington',)####('Daniel Vassallo',)####('seancarmody',)####('Harlan',)####('Andrew Robinson',)####('Anon',)####('seancarmody',)####('Benjamin Bannier',)####('Benjamin Bannier',)####('Benjamin Bannier',)####('Tony Breyal',)####('James',)####('Tony Breyal',)####('Vebjorn Ljosa',)####('Vivi',)####('Benjamin Bannier',)####('Rizwan Kassim',)####('Harlan',)####('dassouki',)####('John L. Taylor',)####('John L. Taylor',)####('SilentGhost',)####('Graham Cookson',)####('Vivi',)####('Suresh Venkatasubramanian',)####('Matti Pastell',)####('AdamV',)####('AdamV',)####('AdamV',)####('Graham Cookson',)####('adi92',)####('Hbar',)####('ars',)####('Vivi',)####('Digital Gal',)####('hslc',)####('George Dontas',)####('deinst',)####('George Dontas',)####('Tony Breyal',)####('dassouki',)####('George Dontas',)####('denis',)####('John D. Cook',)####('John D. Cook',)####('Harlan',)####('JoFrhwld',)####('user549',)####('ymihere',)####('George Dontas',)####('Mike Dewar',)####('gianluca',)####('Mike Dewar',)####('ars',)####('ars',)####('wahalulu',)####('dassouki',)####('gianluca',)####('JoFrhwld',)####('L\u00e8se majest\u00e9',)####('L\u00e8se majest\u00e9',)####('Benjamin Bannier',)####('Ian Boyd',)####('JoFrhwld',)####('emakalic',)####('Thylacoleo',)####('JoFrhwld',)####('brotchie',)####('apeescape',)####('apeescape',)####('ars',)####('Shelby',)####('ars',)####('mmyers',)####('apeescape',)####('John D. Cook',)####('Carlos Accioly',)####('Xodarap',)####('ars',)####('ars',)####('Jonas',)####('Wojtek',)####('user979',)####('Dave Kellen',)####('ars',)####('George Dontas',)####('user979',)####('James',)####('Matt Albrecht',)####('user862',)####('Kamixave',)####('Carlos Accioly',)####('Kamixave',)####('George Dontas',)####('Fabian Fagerholm',)####('George Dontas',)####('Karsten W.',)####('Ramesh Soni',)####('Keith Winstein',)####('Craig Walker',)####('Keith Winstein',)####('Andrew Robinson',)####('Joel',)####('John D. Cook',)####('ars',)####('ars',)####('ars',)####('ars',)####('ars',)####('ars',)####('James',)####('ars',)####('MSalters',)####('Vince',)####('\uff2a. \uff2d.',)####('Bj\u00f6rn Pollex',)####('\uff2a. \uff2d.',)####('George Dontas',)####('\uff2a. \uff2d.',)####('\uff2a. \uff2d.',)####('ars',)####('\uff2a. \uff2d.',)####('Dave Kellen',)####('Josh Bleecher Snyder',)####('Thylacoleo',)####('Thylacoleo',)####('Edward',)####('Tim',)####('fbahr',)####('\uff2a. \uff2d.',)####('ronaf',)####('\uff2a. \uff2d.',)####('Thilo',)####('Thilo',)####('ars',)####('ars',)####('ars',)####('Thylacoleo',)####('ars',)####('ars',)####('ars',)####('ars',)####('paul',)####('Btibert3',)####('ars',)####('Seamus',)####('Rok',)####('fuenfundachtzig',)####('fuenfundachtzig',)####('John D. Cook',)####('ars',)####('John D. Cook',)####('Carlos Accioly',)####('James',)####('Xodarap',)####('ars',)####('ars',)####('John D. Cook',)####('ars',)####('ars',)####('\u0397\u03bb\u03af\u03b1\u03c2',)####('\u0397\u03bb\u03af\u03b1\u03c2',)####('ars',)####('ars',)####('Justin Meltzer',)####('Xodarap',)####('gabgoh',)####('ronaf',)####('James',)####('sxv',)####('ars',)####('ars',)####('Harlan',)####('ars',)####('\uff2a. \uff2d.',)####('Richie Cotton',)####('Richie Cotton',)####('Kortuk',)####('Kortuk',)####('Stedy',)####('\uff2a. \uff2d.',)####('Matt Albrecht',)####('jpalecek',)####('ars',)####('Matthew Leingang',)####('ars',)####('ars',)####('Owe Jessen',)####('ars',)####('\uff2a. \uff2d.',)####('psj',)####('Aaron',)####('Carlos Accioly',)####('Hugo S Ferreira',)####('psj',)####('Harsha M V',)####('Jeff',)####('Jeff',)####('psychresearcher',)####('Joe Philllips',)####('Cyrus S',)####('jebyrnes',)####('Mike Anderson',)####('TheCloudlessSky',)####('ogrisel',)####('ogrisel',)####('HairyBeast',)####('TheCloudlessSky',)####('Kortuk',)####('Lan',)####('Anonymous Type',)####('mariana soffer',)####('dshin',)####('Carlos Accioly',)####('Tom Wright',)####('babelproofreader',)####('Carlos Accioly',)####('\uff2a. \uff2d.',)####('fgregg',)####('dmk38',)####('\uff2a. \uff2d.',)####('Cyrus S',)####('Theodor',)####('\uff2a. \uff2d.',)####('\uff2a. \uff2d.',)####('James',)####('Daniel Standage',)####('Daniel Standage',)####('vqv',)####('user2238',)####('mranders',)####('\uff2a. \uff2d.',)####('Mohit',)####('Matt',)####('vqv',)####('mariana soffer',)####('David',)####('pate',)####('George Dontas',)####('user',)####('luispedro',)####('vqv',)####('Mark Eichenlaub',)####('vqv',)####('vqv',)####('nerdbound',)####('nerdbound',)####('Mark Eichenlaub',)####('vqv',)####('ADEpt',)####('ADEpt',)####('Michiel',)####('hgcrpd',)####('user2742',)####('Elpezmuerto',)####('Betamoo',)####('dmk38',)####('Gil Kalai',)####('Dmitrij Celov',)####('R_Coholic',)####('hyperslug',)####('dfrankow',)####('Mike Dunlavey',)####('James',)####('rmarimon',)####('Ian Langmore',)####('sesqu',)####('Carlos',)####('Dan',)####('Jana',)####('deps_stats',)####('teucer',)####('Eduardo Leoni',)####('Eduardo Le\u00f3n',)####('Gael Varoquaux',)####('Roland Kofler',)####('Leo Alekseyev',)####('George Dontas',)####('Justin L.',)####('Washington S. Silva',)####('user3136',)####('deps_stats',)####('John D. Cook',)####('Paolo',)####('Jonas',)####('Dmitrij Celov',)####('bgbg',)####('dsimcha',)####('Mark Bessey',)####('Robert Harvey',)####('Dmitrij Celov',)####('Owe Jessen',)####('tshauck',)####('Alex Stoddard',)####('Milktrader',)####('Casey Tsui',)####('Elazar Leibovich',)####('deps_stats',)####('bayesian',)####('deps_stats',)####('deps_stats',)####('deps_stats',)####('levesque',)####('SheldonCooper',)####('John Robertson',)####('J. Winchester',)####('M Adams',)####('ashaw',)####('vqv',)####('ashaw',)####('ashaw',)####('Henry B.',)####('dfrankow',)####('Sam Swift',)####('SheldonCooper',)####('vqv',)####('David',)####('dsimcha',)####('AlefSin',)####('Dmitrij Celov',)####('hans0l0',)####('Lalas',)####('SheldonCooper',)####('hans0l0',)####('Marcin',)####('Dmitrij Celov',)####('Qiang Li',)####('David',)####('sinoTrinity',)####('Matt Munson',)####('Matt Munson',)####('Matt Munson',)####('Karsten W.',)####('Or Zuk',)####('lockedoff',)####('SheldonCooper',)####('lockedoff',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('deps_stats',)####('DrWho',)####('Dmitrij Celov',)####('dmk38',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('sesqu',)####('lockedoff',)####('Spencer',)####('Spencer',)####('Sacha Epskamp',)####('SheldonCooper',)####('cwarden',)####('SheldonCooper',)####('SheldonCooper',)####('Wookai',)####('Mark L',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('SheldonCooper',)####('Sarah',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('Dmitrij Celov',)####('Larry Wang',)####('SheldonCooper',)####('dfrankow',)####('SheldonCooper',)####('fabrizioM',)####('George Dontas',)####('Pete Wilson',)####('Dmitrij Celov',)####('lockedoff',)####('Zebs',)####('DrWho',)####('Dmitrij Celov',)####('lockedoff',)####('Dmitrij Celov',)####('Santosh Prabu C',)####('cMinor',)####('Dmitrij Celov',)####('ogrisel',)####('Tomek Tarczynski',)####('movingabout',)####('Tomek Tarczynski',)####('Jeffrey04',)####('Dmitrij Celov',)####('user3136',)####('Dmitrij Celov',)####('SheldonCooper',)####('deps_stats',)####('Pupil',)####('sesqu',)####('emakalic',)####('Andrie',)####('XGreen',)####('gWaldo',)####('AlefSin',)####('Maggie',)####('user862',)####('dmk38',)####('Infinity',)####('Rachel',)####('schenectady',)####('SheldonCooper',)####('zbicyclist',)####('ils',)####('Gael Varoquaux',)####('Suresh Venkatasubramanian',)####('schenectady',)####('Charles',)####('Rosh',)####('Jason Morgan',)####('Marcin',)####('Dmitrij Celov',)####('Jason Morgan',)####('Parbury',)####('Abe',)####('Jason Morgan',)####('Jason Morgan',)####('Dmitrij Celov',)####('Ari',)####('david w',)####('Marcin',)####('david w',)####('Abe',)####('Parbury',)####('Isaac',)####('Chethan S.',)####('Dmitrij Celov',)####('Chethan S.',)####('Gael Varoquaux',)####('hans0l0',)####('user4341',)####('hans0l0',)####('zbicyclist',)####('jd01',)####('solartic',)####('Thies Heidecke',)####('ayush biyani',)####('solartic',)####('Andrie',)####('deps_stats',)####('Chris Simokat',)####('Dmitrij Celov',)####('user2168',)####('Pete',)####('knorv',)####('Richard',)####('schenectady',)####('Thies Heidecke',)####('Seb',)####('IVM',)####('knorv',)####('\uff2a. \uff2d.',)####('InterestedGuest',)####('\uff2a. \uff2d.',)####('MarkDollar',)####('ayush biyani',)####('\uff2a. \uff2d.',)####('Suresh Venkatasubramanian',)####('jkd',)####('dmk38',)####('TMOD',)####('TMOD',)####('teucer',)####('Tauf',)####('B_Dev',)####('cryptron',)####('B_Dev',)####('nycdan',)####('mdsumner',)####('Eduardo Leoni',)####('ayush biyani',)####('ayush biyani',)####('Thomas Levine',)####('Pedro A. Ortega',)####('MarkDollar',)####('Thomas Levine',)####('XenophiliusLovegood',)####('Jonas',)####('Jonathan Shore',)####('JJ O',)####('Dmitrij Celov',)####('Hans Engler',)####('Anne',)####('Dmitrij Celov',)####('ayush biyani',)####('dmk38',)####('Thies Heidecke',)####('zbicyclist',)####('pacomet',)####('Gazi Alankus',)####('Jeff',)####('Bob Durrant',)####('Thomas Levine',)####('scw',)####('Pegah',)####('deps_stats',)####('zbicyclist',)####('Curious2learn',)####('scw',)####('Elliott',)####('BR1',)####('Thies Heidecke',)####('Dmitrij Celov',)####('Sacha Epskamp',)####('Ian Langmore',)####('Elliott',)####('nibot',)####('N26',)####('Thomas Levine',)####('Chris Simokat',)####('dmk38',)####('user181813',)####('Noah',)####('Brett',)####('zbicyclist',)####('Chris Simokat',)####('stan',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('ayush biyani',)####('xmjx',)####('petrichor',)####('mpacer',)####('Chris Simokat',)####('Anne',)####('beza1e1',)####('Chris Simokat',)####('fgregg',)####('petrichor',)####('Thomas Levine',)####('Dmitrij Celov',)####('wolf.rauch',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('MarkDollar',)####('denis',)####('Alex',)####('benhamner',)####('Sergey',)####('benhamner',)####('uvts_cvs',)####('Aengus',)####('isomorphismes',)####('Ramnath',)####('xmjx',)####('Dmitrij Celov',)####('denis',)####('zbicyclist',)####('Martin',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('fgregg',)####('Brian Vandenberg',)####('user5268',)####('wolf.rauch',)####('wolf.rauch',)####('Dmitrij Celov',)####('anonymous_4322',)####('dfrankow',)####('dfrankow',)####('dfrankow',)####('DrWho',)####('duckworthd',)####('Anne',)####('nzcoops',)####('I Like Raffles',)####('jefflovejapan',)####('dominic999',)####('MarkDollar',)####('SheldonCooper',)####('yannick',)####('SheldonCooper',)####('wolf.rauch',)####('user34790',)####('Anne',)####('Galit Shmueli',)####('hawk',)####('wolf.rauch',)####('wolf.rauch',)####('wolf.rauch',)####('wolf.rauch',)####('Regressor',)####('wolf.rauch',)####('wolf.rauch',)####('wolf.rauch',)####('wnoise',)####('Dr G',)####('SheldonCooper',)####('trican',)####('wolf.rauch',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('SheldonCooper',)####('richard',)####('agstudy',)####('Mitch',)####('dominic999',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('Simon',)####('zbicyclist',)####('Will',)####('N F',)####('ImAlsoGreg',)####('yannick',)####('Richie Cotton',)####('yelh',)####('Douglas S. Stones',)####('Dmitrij Celov',)####('Ali',)####('Ali',)####('RyanB',)####('Pyrrhus',)####('Daniel R Hicks',)####('user862',)####('yuk',)####('Chap',)####('\uff2a. \uff2d.',)####('ImAlsoGreg',)####('Galit Shmueli',)####('David M Kaplan',)####('Dmitrij Celov',)####('Linda',)####('Andrie',)####('zbicyclist',)####('highBandWidth',)####('crayola',)####('crayola',)####('Sacha Epskamp',)####('Kev',)####('crayola',)####('crayola',)####('Andy',)####('Muhammad Alkarouri',)####('Ari',)####('J M',)####('Andrew Robinson',)####('user2094',)####('dfrankow',)####('dfrankow',)####('Dave Kincaid',)####('Dave Kincaid',)####('Ivo Flipse',)####('Hans Engler',)####('Jason',)####('Jason',)####('Andrie',)####('Jeff',)####('Dave Owen',)####('lowndrul',)####('Dr G',)####('Dr G',)####('Andrie',)####('Andrew Aylett',)####('Yang',)####('denis',)####('Dmitrij Celov',)####('Figaro',)####('dmk38',)####('ECII',)####('Hans Engler',)####('Jeff',)####('Dmitrij Celov',)####('Benjamin',)####('denis',)####('hans0l0',)####('Tathagata',)####('Yevgeny',)####('aaronjg',)####('mpacer',)####('Eric Suh',)####('Jason',)####('David M Kaplan',)####('Anon',)####('Thilo',)####('David M Kaplan',)####('dontangg',)####('Brian Diggs',)####('Thilo',)####('xmjx',)####('dshin',)####('Jeff',)####('\uff2a. \uff2d.',)####('Maurizio',)####('dshin',)####('gallamine',)####('Murray',)####('mzuba',)####('at01',)####('Thilo',)####('Thilo',)####('dshin',)####('Thomas Levine',)####('Jeff',)####('atomicules',)####('Jason',)####('Vass',)####('Dr. Mike',)####('stan',)####('Peter Taylor',)####('slhck',)####('Laurent',)####('Suresh Venkatasubramanian',)####('Laila',)####('WSkid',)####('Alix Axel',)####('dsimcha',)####('Dail',)####('Noah Yetter',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('Dbr',)####('pharmine',)####('ashaw',)####('Arun',)####('Arun',)####('francogrex',)####('Peter M',)####('Peter M',)####('Chris Simokat',)####('R.M',)####('zbicyclist',)####('Tim',)####('VitalStatistix',)####('Dr G',)####('Owe Jessen',)####('Dmitrij Celov',)####('Mimi',)####('User',)####('John Doucette',)####('Rohit Banga',)####('robermorales',)####('xmjx',)####('barrycarter',)####('Thomas Levine',)####('paul',)####('Jand',)####('Tom',)####('Tim',)####('John Doucette',)####('Adrian',)####('Simone',)####('finnw',)####('P Sellaz',)####('P Sellaz',)####('Haffi112',)####('P Sellaz',)####('Bruno',)####('rosser',)####('rosser',)####('Arun',)####('Liane ong',)####('Henry B.',)####('Flake',)####('teucer',)####('John Colby',)####('Nick',)####('John Doucette',)####('dassouki',)####('Brian Diggs',)####('stan',)####('Ben Jackson',)####('Izkata',)####('My Name',)####('dcl',)####('dassouki',)####('Snitse',)####('mdsumner',)####('xpda',)####('Dov',)####('P Sellaz',)####('\uff2a. \uff2d.',)####('Frank Meulenaar',)####('rosser',)####('Hans Engler',)####('P Sellaz',)####('dfrankow',)####('glenn mcdonald',)####('Erad',)####('Ivan Sopov',)####('Gary',)####('Arvin',)####('Arvin',)####('Jason Morgan',)####('Ivan Sopov',)####('Jessica',)####('LiKao',)####('Nick',)####('zbicyclist',)####('fgregg',)####('teucer',)####('xiaohan2012',)####('gyroidben',)####('varty',)####('Elazar Leibovich',)####('John Doucette',)####('Garrett',)####('cchien',)####('cchien',)####('cchien',)####('Matt Albrecht',)####('rosser',)####('psj',)####('psj',)####('Dan Lurie',)####('Dan Lurie',)####('biofreezer',)####('Renato Dinhani Concei\u00e7\u00e3o',)####('Joel',)####('varty',)####('varty',)####('Jack Schmidt',)####('lowndrul',)####('JackOfAll',)####('Mascarpone',)####('Jim Thio',)####('jrhorn424',)####('Honglang Wang',)####('cyborg',)####('Pete',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('Dmitrij Celov',)####('Yevgeny',)####('Matt Albrecht',)####('user2534',)####('varty',)####('James',)####('f3lix',)####('Patrick Chan',)####('varty',)####('emakalic',)####('Vaibhav Garg',)####('Yevgeny',)####('Yevgeny',)####('Thomas',)####('Moses',)####('Moses',)####('Thomas Levine',)####('psj',)####('Jonas',)####('Diego Jancic',)####('rosser',)####('Simone',)####('varty',)####('Galit Shmueli',)####('kanzen_master',)####('Eric',)####('greenoldman',)####('Simone',)####('B Seven',)####('Andy',)####('dchandler',)####('Simone',)####('Simone',)####('kanzen_master',)####('probabilityman',)####('probabilityman',)####('probabilityman',)####('lowndrul',)####('deinst',)####('mindless.panda',)####('varty',)####('jkd',)####('Paul Hiemstra',)####('SLi',)####('Anton Korobeynikov',)####('Dan Dunn',)####('guest',)####('varty',)####('guest',)####('Luca',)####('Galled',)####('psj',)####('George Dontas',)####('Thilo',)####('rosser',)####('zbicyclist',)####('Brian Diggs',)####('Mark Lister',)####('Pyramis',)####('anonymous_4322',)####('psj',)####('Bene',)####('Faheem Mitha',)####('Jacob',)####('Sasha',)####('Sasha',)####('dchandler',)####('johan',)####('user7064',)####('anonymous_4322',)####('Tu.2',)####('anonymous_4322',)####('Matteo',)####('mike',)####('Qiang Li',)####('Ahsan',)####('Paul Hiemstra',)####('keflavich',)####('Jonas',)####('Jonathan Van Matre',)####('guest',)####('r.e.s.',)####('wdkrnls',)####('finnw',)####('r.e.s.',)####('clyfe',)####('Arun',)####('csetzkorn',)####('DavidShor',)####('Ariel',)####('cyborg',)####('r.e.s.',)####('clyfe',)####('Atilla Ozgur',)####('B Seven',)####('Jack Poulson',)####('DBS',)####('John Gunnar Carlsson',)####('JimBob',)####('Rebecca',)####('Stijn',)####('Patrick Burns',)####('dmk38',)####('djhocking',)####('qkhhly',)####('Charlie',)####('Marek Sebera',)####('Ari',)####('Lostsoul',)####('emrea',)####('Dmitrij Celov',)####('Jack Tanner',)####('Patrick Burns',)####('lucemia',)####('Juan',)####('Michele',)####('user8363',)####('Michele',)####('Hans Engler',)####('Tu.2',)####('Shea Parkes',)####('Frank',)####('FMZ',)####('alexplanation',)####('Dail',)####('Jason Morgan',)####('lokheart',)####('user548084',)####('Charlie',)####('Emer',)####('user8434',)####('Silverfish',)####('user8434',)####('Jonas',)####('yolio',)####('Bob Durrant',)####('Darren Cook',)####('larsmans',)####('larsmans',)####('djma',)####('djma',)####('mmgm',)####('mmgm',)####('JPT',)####('user670186',)####('midnite13',)####('mmgm',)####('Iasonas',)####('Bkkbrad',)####('dominic999',)####('mfrmn',)####('David Z',)####('Zev Chonoles',)####('zeferino',)####('notrockstar',)####('notrockstar',)####('notrockstar',)####('zbicyclist',)####('Thomas Levine',)####('qi5d02lx',)####('Pete',)####('BenJWoodcroft',)####('highBandWidth',)####('Uwat',)####('Swiss Army Man',)####('D.A.',)####('Pete',)####('John-David Dalton',)####('Jack Tanner',)####('Tomek Tarczynski',)####('dsign',)####('Thomas Browne',)####('David Heffernan',)####('Anne Z.',)####('guest',)####('guest',)####('Anne Z.',)####('mmgm',)####('zhouzhuojie',)####('dnagirl',)####('John Doucette',)####('GuhJY',)####('dnagirl',)####('Anne Z.',)####('Jack Tanner',)####('highBandWidth',)####('Jason',)####('Jack Tanner',)####('krlmlr',)####('Ondrej',)####('Dzamo Norton',)####('swiecki',)####('Faheem Mitha',)####('Xavier Labouze',)####('Geek On Acid',)####('Matthew Bilskie',)####('Tomek Tarczynski',)####('user1504',)####('zbicyclist',)####('docstudent',)####('crayola',)####('Platypezid',)####('doofuslarge',)####('Jack Tanner',)####('scottyaz',)####('user1180428',)####('Indolering',)####('Adham',)####('Adham',)####('B R',)####('Anne Z.',)####('Vaibhav Garg',)####('Noah',)####('Strin',)####('andreister',)####('cape1232',)####('Mike Spivey',)####('denis',)####('Anne Z.',)####('Anne Z.',)####('Anne Z.',)####('Shea Parkes',)####('tomas',)####('dassouki',)####('Shea Parkes',)####('Yang',)####('Strohmi',)####('Roronoa Zoro',)####('Nick',)####('Nikhil Bellarykar',)####('Muhammad Alkarouri',)####('biofreezer',)####('Robert Kubrick',)####('Robert Kubrick',)####('Carl Witthoft',)####('eznme',)####('eznme',)####('eznme',)####('deinst',)####('Jeff',)####('user1123466',)####('deinst',)####('Darren Cook',)####('Bruder',)####('Ivan',)####('sparc_spread',)####('bnjmn',)####('Mike Spivey',)####('marcin63',)####('Jeff',)####('John Smith',)####('John Smith',)####('deinst',)####('John Smith',)####('darrelkj',)####('user1061210',)####('ruakh',)####('Jeff',)####('Jeff',)####('Patrick Burns',)####('Stijn',)####('Russell Thackston',)####('user1061210',)####('norbip',)####('justis',)####('martino',)####('martino',)####('109830487515325',)####('Btibert3',)####('Peter Shor ',)####('William Whitworth',)####('martino',)####('gpgpu',)####('Thom Blake',)####('Thom Blake',)####('Dov',)####('neuron',)####('andreister',)####('andreister',)####('Atilla Ozgur',)####('Andrew Rosenberg',)####('andreister',)####('petrichor',)####('B Seven',)####('Andreas Mueller',)####('neuron',)####('neuron',)####('andreister',)####('Andreas Mueller',)####('Dov',)####('winwaed',)####('Dov',)####('winwaed',)####('guest',)####('Maurits',)####('Andrew Rosenberg',)####('Gong-Yi Liao',)####('deinst',)####('deinst',)####('Darren Cook',)####('Jeff',)####('deinst',)####('joint_p',)####('ogrisel',)####('guest',)####('joint_p',)####('joint_p',)####('Graphth',)####('Mike Spivey',)####('Martin Smith',)####('Yevgeny',)####('Graphth',)####('Tony Breyal',)####('guest',)####('guest',)####('J. Maes',)####('Waldo000000',)####('wen.huang',)####('user900978',)####('R\u00f3n\u00e1n Daly',)####('User',)####('Cara',)####('joint_p',)####('M\u00fcnchhausen',)####('Kyle Brandt',)####('Thilo',)####('utdiscant',)####('Simone',)####('hbaghishani',)####('Guy',)####('Ivan Dimitrov',)####('mike',)####('ruakh',)####('Sarge',)####('dcl',)####('guest',)####('cape1232',)####('Ronald L Rivest',)####('Ben Lauderdale',)####('Yevgeny',)####('mike',)####('guest',)####('asjohnson',)####('asjohnson',)####('ogrisel',)####('guest',)####('guest',)####('guest',)####('guest',)####('guest',)####('Nick',)####('allie',)####('Learner',)####('Rachel',)####('Evgeniy',)####('guest',)####('krlmlr',)####('jlovegren',)####('zbicyclist',)####('John Doucette',)####('xmjx',)####('Mittenchops',)####('Wenhao.SHE',)####('Franz Brentano',)####('guest',)####('guest',)####('Ivan',)####('guest',)####('Oliver',)####('Jack Tanner',)####('JonnyBoats',)####('Mutuelinvestor',)####('chab',)####('guest',)####('guest',)####('dplanet',)####('guest',)####('Adam',)####('krlmlr',)####('Ahmet Y\u0131lmaz',)####('dplanet',)####('Will',)####('Marius',)####('Marius',)####('Suresh Venkatasubramanian',)####('Drew Steen',)####('dominic999',)####('deinst',)####('Jehu',)####('guest',)####('blue and grey',)####('guest',)####('Will',)####('Yevgeny',)####('Tianyang Li',)####('Hallgeir',)####('Geni',)####('zbicyclist',)####('zbicyclist',)####('guest',)####('guest',)####('user1205901',)####('Dragonwalker',)####('max',)####('zeferino',)####('Chris Simokat',)####('Jehu',)####('Robert Kubrick',)####('zbicyclist',)####('Jim Bo',)####('user7064',)####('Naomi B. Robbins',)####('Robert Kubrick',)####('Drew Steen',)####('SheldonCooper',)####('zzk',)####('chk',)####('Paul Eastlund',)####('Paul Eastlund',)####('Leo Schalkwyk',)####('Ana Maria Popescu',)####('Sheila',)####('Jack Tanner',)####('user1228982',)####('Mashud',)####('Nick',)####('deinst',)####('guest',)####('guest',)####('Oeufcoque Penteano',)####('max',)####('Nick',)####('P Sellaz',)####('david',)####('AttemptedStudent',)####('P Sellaz',)####('Harlan',)####('Harlan',)####('Harlan',)####('Harlan',)####('Etienne Low-D\u00e9carie',)####('Owe Jessen',)####('GuhJY',)####('James',)####('Manuel',)####('Salman A',)####('jmtroos',)####('guest',)####('dominic999',)####('guest',)####('Vince Kueter',)####('guest',)####('zywind',)####('Jehu',)####('guest',)####('guest',)####('M. Alaggan',)####('deinst',)####('psj',)####('Oeufcoque Penteano',)####('Alan H.',)####('Alan H.',)####('garak',)####('marcos',)####('Ariel',)####('marcos',)####('Chloe',)####('Robert Kubrick',)####('dominic999',)####('AlexK',)####('guest',)####('guest',)####('Serenity Stack Holder',)####('user7064',)####('l0b0',)####('Nick',)####('dmckee',)####('Chris',)####('Luna',)####('dominic999',)####('dmckee',)####('Lucas',)####('emory',)####('SheldonCooper',)####('chepukha',)####('Nick',)####('PHPst',)####('VitoshKa',)####('krlmlr',)####('reisner',)####('Robert Kubrick',)####('Wenhao.SHE',)####('Colin K',)####('Ronald',)####('oDDsKooL',)####('Ronald',)####('psj',)####('oDDsKooL',)####('carbocation',)####('guest',)####('alfa',)####('dcl',)####('James Waters',)####('mjibson',)####('guest',)####('guest',)####('Mark Fox',)####('Matt Albrecht',)####('user7064',)####('user7064',)####('denis',)####('Matt Albrecht',)####('Ken Williams',)####('Ken Williams',)####('dav',)####('FurtiveFelon',)####('David M Kaplan',)####('Alekk',)####('Tu.2',)####('dominic999',)####('dubhousing',)####('ulnberg',)####('George Eracleous',)####('George Eracleous',)####('Shea Parkes',)####('mariosangiorgio',)####('utdiscant',)####('Carl',)####('denis',)####('guest',)####('Etienne Low-D\u00e9carie',)####('Feral Oink',)####('alfa',)####('alfa',)####('DavideChicco.it',)####('Mathias',)####('Eugene Retunsky',)####('user568458',)####('Rave',)####('Jason B',)####('Jason B',)####('guest',)####('Ankush',)####('Colin K',)####('Ankush',)####('Ankush',)####('krlmlr',)####('dchandler',)####('baha-kev',)####('Joe',)####('Patrick Burns',)####('noumenal',)####('lliiffee',)####('Ben Aaronson',)####('psj',)####('user602774',)####('Dan',)####('dchandler',)####('prototoast',)####('Jason B',)####('bootstrapping CI question',)####('guest',)####('dchandler',)####('Jason B',)####('Jason B',)####('guest',)####('ogrisel',)####('ogrisel',)####('Arun',)####('guest',)####('guest',)####('user4673',)####('Etienne Low-D\u00e9carie',)####('guest',)####('guest',)####('guest',)####('guest',)####('edwin',)####('Drew',)####('Marius',)####('Steve Brooks',)####('Steve Brooks',)####('andrew cooke',)####('Yves',)####('MathematicalOrchid',)####('cubearth',)####('Erich Peterson',)####('chrisb',)####('guest',)####('Robert Kubrick',)####('KH Kim',)####('user645715',)####('KH Kim',)####('guest',)####('Robert Kubrick',)####('tskuzzy',)####('Alexander Serebrenik',)####('pedrosaurio',)####('Ronald',)####('dav',)####('RobJackson28',)####('KH Kim',)####('caseyr547',)####('neilfws',)####('Etienne Low-D\u00e9carie',)####('jrennie',)####('Jack Tanner',)####('Mohsen',)####('Mohsen',)####('Taylor',)####('nkormanik',)####('Viet Hoang Quoc',)####('Frank',)####('rumbleB',)####('Alex',)####('andrew',)####('natorro',)####('baris_a',)####('Lostsoul',)####('Jack Tanner',)####('Willie Wong',)####('Nick',)####('Nick',)####('Nick',)####('Frank',)####('Chris',)####('dan12345',)####('Mulone',)####('John Manak',)####('Lucas Reis',)####('Lucas Reis',)####('Nick',)####('guest',)####('luispedro',)####('chris',)####('MrBones',)####('Andy McKenzie',)####('friveroll',)####('Suresh Venkatasubramanian',)####('Suresh Venkatasubramanian',)####('Suresh Venkatasubramanian',)####('Jason O. Jensen',)####('Mike Dunlavey',)####('Kerim Atasoy',)####('VBR',)####('Kerim Atasoy',)####('Etienne Low-D\u00e9carie',)####('Quantitative Historian',)####('BrainPermafrost',)####('Paul',)####('Patrick Caldon',)####('Vinay',)####('Nick',)####('Nick',)####('JVMcDonnell',)####('anonymous_4322',)####('Jeremy Hageman',)####('friveroll',)####('Filype',)####('dimi',)####('Dmitry Laptev',)####('Paul',)####('psj',)####('JVMcDonnell',)####('Frank',)####('Charles',)####('Justin',)####('agent86',)####('Dmitry Laptev',)####('octern',)####('Andy McKenzie',)####('Patrick',)####('Rachel',)####('Gim',)####('David Heffernan',)####('guest',)####('David Heffernan',)####('guest',)####('user11749',)####('AlefSin',)####('Dmitry Laptev',)####('Vokram',)####('enedene',)####('Mariken',)####('user31820',)####('alfa',)####('colonel.triq',)####('Maxime',)####('Arnold Neumaier',)####('Yike Lu',)####('stan',)####('Dmitry Laptev',)####('alfa',)####('user31820',)####('Brian Diggs',)####('larsmans',)####('stackovergio',)####('Dmitry Laptev',)####('Dmitry Laptev',)####('Wendy Alfaro',)####('Greg',)####('Blake Riley',)####('Blake Riley',)####('Blake Riley',)####('Blake Riley',)####('biomarker',)####('Andy McKenzie',)####('Sean',)####('Andy McKenzie',)####('user1111261',)####('user1111261',)####('V\u00ffska',)####('V\u00ffska',)####('Robert Kubrick',)####('Drew',)####('Trying Hard',)####('Trying Hard',)####('Jag',)####('Anna',)####('John',)####('twerdster',)####('Captain Murphy',)####('Andy McKenzie',)####('Sean',)####('psj',)####('Rachel',)####('emrea',)####('Amyunimus',)####('Emily',)####('Fomb',)####('Prakash Gautam',)####('Ensom Hodder',)####('emrea',)####('Will',)####('Jonathan Thiele',)####('Jonathan Thiele',)####('Lucas Reis',)####('Rachel',)####('Chap',)####('Alexey',)####('Dmitry Laptev',)####('Prakash Gautam',)####('karenu',)####('ALiX',)####('Lucas Reis',)####('Andrie',)####('Carl Witthoft',)####('Dmitry Laptev',)####('Andrie',)####('Joao Azevedo',)####('Jakub Zaverka',)####('Lee',)####('Knightgu',)####('Jakub Zaverka',)####('Jonas M\u00fcller',)####('Juan',)####('Jdub',)####('Etienne Low-D\u00e9carie',)####('Derek Jones',)####('Etienne Low-D\u00e9carie',)####('Ryan Rosario',)####('Samuel Hulick',)####('Johann Hibschman',)####('Johann Hibschman',)####('Jonathan Thiele',)####('quant_dev',)####('Lucas Reis',)####('Lucas Reis',)####('Prachi',)####('Wynn',)####('Fred',)####('Chap',)####('Jim',)####('ProbablyWrong',)####('user1234909',)####('Flav',)####('ALiX',)####('Jesse',)####('MathematicalOrchid',)####('Honglang Wang',)####('Patrick Caldon',)####('Jay',)####('Radek',)####('Marc Shivers',)####('Marc Shivers',)####('Ensom Hodder',)####('Cesar',)####('user12208',)####('Jonathan Thiele',)####('zbicyclist',)####('Kris Harper',)####('Cesar',)####('Arun',)####('Sabih Agbaria',)####('Arun',)####('aaronjg',)####('Jonathan Thiele',)####('tony gabay',)####('alfa',)####('atiretoo',)####('atiretoo',)####('swiecki',)####('Deah',)####('Yves',)####('JamesTheAwesomeDude',)####('atiretoo',)####('Matt Munson',)####('atiretoo',)####('image_doctor',)####('user1129988',)####('user3671',)####('Bo Yu',)####('Markus Loecher',)####('Bo Yu',)####('Daniel R Hicks',)####('Aviv',)####('Daniel R Hicks',)####('felize2000',)####('felize2000',)####('rossdavidh',)####('Quantitative Historian',)####('zbicyclist',)####('rahul',)####('david',)####('user568458',)####('Matt Wilko',)####('V\u00ffska',)####('Daniel R Hicks',)####('Cesar',)####('Timtico',)####('Martin Berglund',)####('derPio',)####('Anthony',)####('John',)####('Luna',)####('Luna',)####('Sepehr',)####('Sepehr',)####('Sepehr',)####('stackovergio',)####('Chris',)####('Shea Parkes',)####('Sepehr',)####('Andy',)####('Daniel R Hicks',)####('atiretoo',)####('Luna',)####('Ilmari Karonen',)####('Arek Paterek',)####('Vladimir Chupakhin',)####('Herra Huu',)####('anxoestevez',)####('Mozan Sykol',)####('Josh',)####('Perlnika',)####('Perlnika',)####('Perlnika',)####('Alekk',)####('John',)####('daniloquio',)####('Ghillie Dhu',)####('Bowler',)####('Bowler',)####('Gang Liu',)####('John',)####('garak',)####('Marius',)####('Ghillie Dhu',)####('atiretoo',)####('Bkkbrad',)####('person157',)####('Suresh Venkatasubramanian',)####('theomega',)####('Oliver',)####('StochastikerUBERL',)####('Alexey',)####('Cyrus',)####('Cyrus',)####('Francesco',)####('Alex Williams',)####('kanzen_master',)####('Cyrus',)####('Cyrus',)####('kanzen_master',)####('heavydutydev',)####('heavydutydev',)####('David',)####('act00',)####('Wynn',)####('VitalStatistix',)####('John',)####('Subtle Array',)####('Joshua',)####('Ryogi',)####('thelatemail',)####('Joshua',)####('Johannes',)####('Johannes',)####('Luna',)####('VitalStatistix',)####('tejas_kale',)####('jlovegren',)####('jlovegren',)####('chaohuang',)####('user1137731',)####('Cyrus',)####('julieth',)####('s.s.o',)####('blJOg',)####('Nikita Samoylov',)####('julieth',)####('Cyrus',)####('Thomas Jungblut',)####('Brian Diggs',)####('studenteconomics',)####('sergeyf',)####('Thomas Jungblut',)####('hbaghishani',)####('sergeyf',)####('atomicules',)####('ars',)####('Darren Cook',)####('Shea Parkes',)####('Mike Stumpf',)####('gerrit',)####('Chan',)####('ABC',)####('ChrisArmstrong',)####('Ian Boyd',)####('user1137731',)####('rnorberg',)####('d_ijk_stra',)####('Thomas',)####('Davi Moreira',)####('julieth',)####('Peter Teunissen',)####('M. Vorobyov',)####('steviekm3',)####('steviekm3',)####('jiggysoo',)####('petroica',)####('Lucas Reis',)####('John',)####('dav',)####('singelton',)####('blerta',)####('Alfred M.',)####('singelton',)####('benrolls',)####('Andrie',)####('chtfn',)####('Rachel',)####('Josh Caswell',)####('Rachel',)####('Christopher',)####('Christopher',)####('Rachel',)####('Rachel',)####('Mark Adler',)####('Christopher',)####('tkw954',)####('Jason Morgan',)####('Faith',)####('Yevgeny',)####('snow_leopard',)####('Roark',)####('mCorey',)####('David Heffernan',)####('David Heffernan',)####('Allan Engelhardt',)####('slhck',)####('Katarina Forkmann',)####('zbicyclist',)####('Ricky Robinson',)####('Lucas Reis',)####('emrea',)####('Chris',)####('Joshua Frank',)####('stan',)####('Sepehr',)####('Brian',)####('jkd',)####('Joshua',)####('Joshua',)####('user31820',)####('user31820',)####('Boo',)####('Croad Langshan',)####('Croad Langshan',)####('Croad Langshan',)####('user13154',)####('Erick T',)####('Shea Parkes',)####('Derrick Coetzee',)####('John',)####('dav',)####('julieth',)####('Cel',)####('Patrick Caldon',)####('water',)####('anna-earwen',)####('Vishal Belsare',)####('qqq',)####('muratoa',)####('user116293',)####('user116293',)####('user12397',)####('muratoa',)####('slayton',)####('user2303',)####('qqq',)####('John',)####('vizzero',)####('muratoa',)####('Yves',)####('Dmitry Laptev',)####('muratoa',)####('muratoa',)####('Andrie',)####('vkubicki',)####('PatrickT',)####('John',)####('John',)####('Aengus',)####('Stat-R',)####('user4673',)####('Yoda',)####('bogatron',)####('dmckee',)####('Nikratio',)####('Cec.g',)####('Stuart',)####('Paul R',)####('mike',)####('barrycarter',)####('M.A',)####('tristan',)####('Green Code',)####('zzk',)####('David Roberts',)####('David Roberts',)####('user829438',)####('Sejanus',)####('Honglang Wang',)####('Tarantula',)####('R Frank',)####('warbaker',)####('RobertF',)####('Stuart Robbins',)####('Mark Eichenlaub',)####('tristan',)####('Yuval F',)####('rumpel',)####('rumpel',)####('tiantianchen',)####('thecity2',)####('John Robertson',)####('tristan',)####('RegDwight',)####('pedrosaurio',)####('Tarantula',)####('R. Schumacher',)####('Alex Nye',)####('user969113',)####('RobertF',)####('Roronoa Zoro',)####('Flounderer',)####('fgrieu',)####('user13332',)####('Vegard',)####('geotheory',)####('Baloo',)####('John',)####('Jeffrey',)####('Charlie',)####('user13154',)####('dave',)####('Noam Kremen',)####('user13154',)####('user13154',)####('pemistahl',)####('Yves',)####('Mike',)####('draft',)####('muratoa',)####('user1447630',)####('Marja',)####('fgregg',)####('fgregg',)####('fgregg',)####('Emil Friedman',)####('h.l.m',)####('tere\u0161ko',)####('dazed_and_confused',)####('Claudio Albertin',)####('user14075',)####('Claudio Albertin',)####('Luciano Selzer',)####('Elabore',)####('blues',)####('Linda',)####('John',)####('user1172468',)####('Daniel R Hicks',)####('Taylor',)####('Nagel',)####('Chris',)####('Nagel',)####('ils',)####('Placidia',)####('Darren Cook',)####('cjohnson318',)####('Steve Stewart',)####('Michael Schwartz',)####('dav',)####('RobertF',)####('Abdelhak Mahmoudi',)####('Abdelhak Mahmoudi',)####('ansek',)####('Chenghao Liu',)####('Yoda',)####('Sean',)####('N Brouwer',)####('Dan M.',)####('Emmanuel Charpentier',)####('Archaeopteryx',)####('Archaeopteryx',)####('James LI',)####('babelproofreader',)####('zbicyclist',)####('ziyuang',)####('tom',)####('Valentin Ruano',)####('Placidia',)####('octern',)####('Dan M.',)####('Barranka',)####('Ken Williams',)####('Ken Williams',)####('Leo',)####('John',)####('tedddd',)####('Meadowlark Bradsher',)####('eyaler',)####('\uff2a. \uff2d.',)####('Roz',)####('Roz',)####('Roz',)####('Roz',)####('Greg Guida',)####('f3lix',)####('Placidia',)####('ffriend',)####('ffriend',)####('Simone',)####('user13985',)####('Oddthinking',)####('madprob',)####('Luigi Plinge',)####('John Robertson',)####('ziyuang',)####('pat',)####('Stuart',)####('adunaic',)####('Pat Keough',)####('CharlesM',)####('pemistahl',)####('Diego',)####('Diego',)####('Diego',)####('mhermans',)####('phaneron',)####('Stuart',)####('dbr',)####('Ziel',)####('N Brouwer',)####('Ziel',)####('Dmitry Laptev',)####('phaneron',)####('jkd',)####('Christin',)####('Wake2Sleep',)####('goodside',)####('Dan',)####('pteetor',)####('Ari',)####('sviter',)####('David Epstein',)####('phaneron',)####('Jesus Herranz Valera',)####('Toby Kelsey',)####('MannyG',)####('Steve P',)####('Jeff',)####('Ryogi',)####('soufanom',)####('N Brouwer',)####('Placidia',)####('Placidia',)####('JakeM',)####('R. Schumacher',)####('John Moeller',)####('cups',)####('calbear',)####('John Doucette',)####('Layke',)####('user9203',)####('Blain Waan',)####('prototoast',)####('Blain Waan',)####('kirk',)####('RobertF',)####('DanTheMan',)####('DanTheMan',)####('erich',)####('ayariga',)####('vanessa',)####('Stuart',)####('rudivonstaden',)####('Mr. White',)####('Farbod',)####('rudivonstaden',)####('sebhofer',)####('gerrit',)####('Blain Waan',)####('smci',)####('smci',)####('Ali Sharifi',)####('deong',)####('Kplee',)####('Kplee',)####('Kplee',)####('Kplee',)####('Nick',)####('Xodarap',)####('snow_leopard',)####('Volomike',)####('kirk',)####('phaneron',)####('Xodarap',)####('Xodarap',)####('pat',)####('Xodarap',)####('Chris Steinbach',)####('Blain Waan',)####('pat',)####('guest',)####('FredrikD',)####('FredrikD',)####('octern',)####('image_doctor',)####('Zylfj',)####('phaneron',)####('Shea Parkes',)####('image_doctor',)####('Peter Wood',)####('image_doctor',)####('image_doctor',)####('image_doctor',)####('Szabolcs',)####('Sasha',)####('Arnold Neumaier',)####('stacy',)####('tpg2114',)####('user16548',)####('heltonbiker',)####('user333700',)####('Javad',)####('Jason Morgan',)####('octern',)####('locster',)####('ShreevatsaR',)####('Sihem',)####('rob123',)####('ShreevatsaR',)####('gerrit',)####('kanzen_master',)####('Ben Brocka',)####('Nick Adams',)####('Nick Adams',)####('Joseph Ryan Glover',)####('ShreevatsaR',)####('Tito Candelli',)####('Matteo Fasiolo',)####('Xodarap',)####('phaneron',)####('phaneron',)####('soegaard',)####('user1775772',)####('guest',)####('Nick Adams',)####('Blain Waan',)####('A New Guy',)####('ShreevatsaR',)####('phaneron',)####('Fashandge',)####('FSpanhel',)####('guest',)####('zbicyclist',)####('Jon Smark',)####('Mike Dunlavey',)####('phaneron',)####('user1453477',)####('James Stanley',)####('James Stanley',)####('Johnn',)####('locke14',)####('Henry B.',)####('chandler',)####('Jack Tanner',)####('Gilles',)####('Tyro',)####('Tyro',)####('Torvon',)####('Jack Tanner',)####('Sven Stodtmann',)####('user3671',)####('Sven Stodtmann',)####('robguinness',)####('Dr. Mike',)####('tzeH',)####('asker123',)####('asker123',)####('Deniz',)####('tSchema',)####('Jason Morgan',)####('Blain Waan',)####('Kasper Christensen',)####('Cristina',)####('Dr. Mike',)####('lodhb',)####('madness',)####('nkorf',)####('user12414',)####('guest',)####('Simon Hunt',)####('zbicyclist',)####('Coppola',)####('J_L',)####('Mike Dunlavey',)####('Mathias',)####('Matt Albrecht',)####('Matteo Fasiolo',)####('Davoud Taghawi-Nejad',)####('user17211',)####('user17211',)####('Blain Waan',)####('Jack Tanner',)####('user963386',)####('Matt Albrecht',)####('John',)####('mike',)####('Maifiana Sari',)####('Richard',)####('Richard',)####('user12290',)####('John Moeller',)####('n.e.w',)####('zbicyclist',)####('John',)####('Richard',)####('Mitch Gibbs',)####('mikeb',)####('DanTheMan',)####('Christoph_J',)####('RobertF',)####('DanTheMan',)####('Simon Hayward',)####('Simone',)####('Michelle',)####('Robert Jones',)####('Cookie',)####('Gilbert',)####('John Moeller',)####('JamesTheAwesomeDude',)####('ffriend',)####('RubenGeert',)####('DanTheMan',)####('DanTheMan',)####('image_doctor',)####('Druss2k',)####('soufanom',)####('Simon Hayward',)####('Hardy',)####('max',)####('Hardy',)####('Kanch',)####('mike',)####('StatsStudent',)####('Camille',)####('Henry B.',)####('image_doctor',)####('Corey Sparks',)####('Orlando Mezquita',)####('R S',)####('John',)####('Dean Portelli',)####('Dean Portelli',)####('scalar',)####('Dapz',)####('Will Jagy',)####('joriki',)####('joriki',)####('joriki',)####('joriki',)####('James Stanley',)####('Will Jagy',)####('denis',)####('DanTheMan',)####('Michael A Ghebre',)####('Ernest A',)####('JeremyR',)####('JeremyR',)####('Placidia',)####('Xodarap',)####('VVV',)####('Placidia',)####('dramaticlook',)####('gooddelta',)####('MaoYiyi',)####('Placidia',)####('Placidia',)####('Ken Williams',)####('Josh Hansen',)####('jbarlow',)####('Steven',)####('Kamran',)####('tomasz74',)####('itamarbe',)####('Saber CN',)####('guest',)####('flow',)####('Xodarap',)####('Peter Shor ',)####('Peter Shor ',)####('Placidia',)####('Placidia',)####('Placidia',)####('Placidia',)####('regulatethis',)####('regulatethis',)####('SlowLearner',)####('JJM',)####('user18010',)####('DanTheMan',)####('act00',)####('Charles',)####('Joe Pairman',)####('Xodarap',)####('Brian',)####('John',)####('flow',)####('user18075',)####('zorbar',)####('Giorgio Spedicato',)####('zorbar',)####('Sean',)####('Andrzej',)####('mat kelcey',)####('Robert Kubrick',)####('Samir',)####('Matteo Fasiolo',)####('Robert Kubrick',)####('Placidia',)####('Placidia',)####('Placidia',)####('Patrick Li',)####('nomad2986',)####('Placidia',)####('entropy',)####('user1834300',)####('Johannes Hofmeister',)####('Abraham D Flaxman',)####('Abraham D Flaxman',)####('pat',)####('pat',)####('pat',)####('Johannes Hofmeister',)####('Johannes Hofmeister',)####('Steve P',)####('Abraham D Flaxman',)####('Johnson Chang',)####('Guy Adini',)####('Vladimir Chupakhin',)####('Patrick Caldon',)####('Dapz',)####('DL10x',)####('Ay-Jay',)####('R S',)####('Davide',)####('R S',)####('neophyte',)####('Upul',)####('Clair Crossupton',)####('soufanom',)####('Gilbert',)####('surtur',)####('O P',)####('James Stanley',)####('Allan Engelhardt',)####('Komal',)####('Corey Sparks',)####('Donnie',)####('Placidia',)####('Dave Kincaid',)####('The_Cthulhu_Kid',)####('Marc Shivers',)####('Clair Crossupton',)####('James Stanley',)####('Alric',)####('dandar',)####('James Stanley',)####('user19687',)####('Arun',)####('ffriend',)####('James Stanley',)####('JeffJo',)####('Placidia',)####('James Stanley',)####('Taylor',)####('DKK',)####('Georg M. Goerg',)####('soufanom',)####('Abhijit Rao',)####('Robert Kuykendall',)####('thedude',)####('ZafarS',)####('ZafarS',)####('ZafarS',)####('IMA',)####('IMA',)####('noumenal',)####('James Stanley',)####('user1665220',)####('FBC',)####('noindent',)####('SVDer',)####('dandar',)####('Mozan Sykol',)####('Tim',)####('alex',)####('Daniele B',)####('Alex',)####('Jonas',)####('alex',)####('Darren Cook',)####('IMA',)####('IMA',)####('Jonas',)####('A.D',)####('Aman',)####('wil2161',)####('CJ12',)####('user12719',)####('user20094',)####('dartdog',)####('Jonathan',)####('Jochem',)####('Jason Morgan',)####('Jonathan',)####('James Stanley',)####('Chris',)####('Placidia',)####('Placidia',)####('Jane',)####('Simone',)####('James Stanley',)####('Hugh Perkins',)####('James Stanley',)####('vanguard2k',)####('Sepehr',)####('Chris',)####('Jonas',)####('adelweis',)####('Prateek Kulkarni',)####('sds',)####('nicolas',)####('antitrust',)####('a3nm',)####('James Stanley',)####('James Stanley',)####('James Stanley',)####('Darren Cook',)####('user12719',)####('zbicyclist',)####('Pegah',)####('James Stanley',)####('Jonna',)####('James Stanley',)####('Shea Parkes',)####('edallme',)####('James Stanley',)####('Steven',)####('James Stanley',)####('Chris',)####('Nick',)####('Pat',)####('Matteo Fasiolo',)####('Innuo',)####('demt',)####('user12719',)####('frenchja',)####('gerrit',)####('biologue',)####('robamaton',)####('Steven',)####('user12719',)####('Aftershock',)####('arielf',)####('Darren Cook',)####('Leo Schalkwyk',)####('Pegah',)####('Pegah',)####('Vladimir Chupakhin',)####('Aleksandr Dubinsky',)####('xk_id',)####('user20705',)####('Chris',)####('Placidia',)####('user24276',)####('Namey',)####('Namey',)####('nellington',)####('Arne',)####('philchalmers',)####('S. Robert James',)####('S. Robert James',)####('static_rtti',)####('Pseudo_Scientist',)####('gwern',)####('Namey',)####('nellington',)####('Jack Tanner',)####('Geoff',)####('Corey Sparks',)####('Aerik',)####('madprob',)####('Jack Tanner',)####('Jack Tanner',)####('Ken Y-N',)####('Gong-Yi Liao',)####('alittleboy',)####('siamii',)####('philchalmers',)####('ivan',)####('John Doe',)####('John Doe',)####('John Lombardi',)####('djhocking',)####('Jaakko Sepp\u00e4l\u00e4',)####('John Doe',)####('gerrit',)####('Jacob Greenleaf',)####('user557240',)####('Christoph_J',)####('image_doctor',)####('Aly',)####('dubhousing',)####('sam',)####('Jakob',)####('Tarantula',)####('Patrick Caldon',)####('R.Astur',)####('dataznkid1',)####('Niru',)####('phoxis',)####('EML',)####('jotomicron',)####('Tarantula',)####('Leo',)####('Leo',)####('DanTheMan',)####('mhum',)####('Tarantula',)####('Leo',)####('natalie82',)####('Roland Kofler',)####('Placidia',)####('Yves',)####('Cris Stringfellow',)####('SRJ',)####('rgm',)####('Robert Jones',)####('A New Guy',)####('user9171',)####('garyrob',)####('Bob Durrant',)####('Mike Dunlavey',)####('Aly',)####('helena',)####('Stijn',)####('pnuts',)####('pnuts',)####('z0lo',)####('M. Cypher',)####('Pegah',)####('Leo H M Arruda',)####('Leo H M Arruda',)####('Luke',)####('Ivri',)####('EnricoGiampieri',)####('Kumara',)####('user000001',)####('Dan Filimon',)####('orpetil',)####('nostock',)####('nafets',)####('saccharine',)####('Huub Hoofs',)####('etov',)####('simmmons',)####('confusedCoder',)####('meepmeep',)####('Emile',)####('alfa',)####('Sara Walsh',)####('James Stanley',)####('alfa',)####('Matteo De Felice',)####('jasonb',)####('emrea',)####('Zev Chonoles',)####('bryansis2010',)####('entropy',)####('SethG',)####('fida',)####('user20650',)####('nellington',)####('nellington',)####('Sarah',)####('Tom',)####('drammock',)####('kram1032',)####('CodeKingPlusPlus',)####('Druss2k',)####('John',)####('Bjorn Roche',)####('Tom',)####('Sneha',)####('user787267',)####('Cris Stringfellow',)####('Cris Stringfellow',)####('Cris Stringfellow',)####('Herbert',)####('user21891',)####('Subspacian',)####('user21891',)####('user1448319',)####('user1448319',)####('Camilla',)####('Aly',)####('RBI',)####('M.P.',)####('M. Cypher',)####('Kasper Christensen',)####('Hugo',)####('M. Cypher',)####('Tom Au',)####('user66794',)####('padawan',)####('Mike Dunlavey',)####('Tom Au',)####('user20650',)####('julieth',)####('user67005',)####('Sepehr',)####('Jimj',)####('user1375871',)####('Indolering',)####('roelandvanbeek',)####('user1448319',)####('onnodb',)####('user20650',)####('Jason Morgan',)####('Jason Morgan',)####('pengsun.thu',)####('jabberwocky',)####('Shion',)####('Carlos Villacorta',)####('James Stanley',)####('Arne Roomann-Kurrik',)####('akonsu',)####('Max',)####('greg121',)####('user1448319',)####('philchalmers',)####('Konstantin',)####('Salih Ucan',)####('Joshua',)####('Tomek Tarczynski',)####('DoctorAmbient',)####('phil12',)####('Tim',)####('Mikhail Korobov',)####('Robert Smith',)####('user1',)####('Yves',)####('EngrStudent',)####('Flounderer',)####('tibL',)####('BlueTrin',)####('Eric Brady',)####('nil',)####('dave',)####('user1',)####('nil',)####('Andreas',)####('Andreas',)####('Triple roast',)####('Triple roast',)####('Triple roast',)####('Triple roast',)####('Triple roast',)####('HCAI',)####('Emer',)####('Repo',)####('Repo',)####('R S',)####('SilverCt',)####('R S',)####('R S',)####('SilverCt',)####('jayb',)####('Jon Peltier',)####('Shea Parkes',)####('Fred',)####('Kasper Christensen',)####('James Stanley',)####('andrewH',)####('Tamas Ferenci',)####('Tom',)####('Tae-Sung Shin',)####('Bogdan',)####('HCAI',)####('user20650',)####('user20650',)####('dav',)####('Breyer',)####('Ruggero Turra',)####('Robert Jones',)####('Youcha',)####('dav',)####('eykanal',)####('EngrStudent',)####('Hamed',)####('Magnus',)####('Magnus',)####('roody',)####('Tim',)####('Tim',)####('nicolas',)####('Alberto acepsut',)####('Alberto acepsut',)####('Simone',)####('Dominique',)####('image_doctor',)####('wannymahoots',)####('EngrStudent',)####('zcourts',)####('hong',)####('J Mint',)####('a11msp',)####('timothy.s.lau',)####('Daniel Renshaw',)####('jjepsuomi',)####('Sarah',)####('Jompa234',)####('darcy.mulder',)####('Ghillie Dhu',)####('Nick Riches',)####('tibL',)####('colonel.triq',)####('EngrStudent',)####('soufanom',)####('Bird Jaguar IV',)####('Clayton Stanley',)####('allie',)####('allie',)####('image_doctor',)####('atrichornis',)####('gavaletz',)####('allie',)####('user1634075',)####('Stef van Buuren',)####('James Stanley',)####('thecity2',)####('user20650',)####('Silverfish',)####('Gilbert',)####('R.Astur',)####('user20650',)####('IMA',)####('image_doctor',)####('Gary S. Weaver',)####('Francisco Arceo',)####('user22478',)####('EngrStudent',)####('Jonas',)####('Paul',)####('random_user',)####('colinfang',)####('saccharine',)####('Stanislav',)####('colinfang',)####('Patrick',)####('Mike',)####('Patrick',)####('user542833',)####('Aman',)####('Stijn',)####('IMA',)####('Diana E',)####('user2273972',)####('astroboy',)####('EngrStudent',)####('Raphael',)####('random_user',)####('random_user',)####('Guest483',)####('John',)####('nates',)####('IMA',)####('image_doctor',)####('Ricky Robinson',)####('Alice',)####('Vince',)####('alfa',)####('Atticus29',)####('Shirley',)####('gerrit',)####('Corey Sparks',)####('Adrian',)####('ReliableResearch',)####('while',)####('soufanom',)####('Jason Morgan',)####('chase',)####('nzcoops',)####('Shinobii',)####('Yves',)####('austin',)####('Yves',)####('An Mai',)####('user24523',)####('vchhaya',)####('Luigi Plinge',)####('joint_p',)####('IMA',)####('John Lawrence Aspden',)####('zhanxw',)####('hjg hjg',)####('Robert Jones',)####('Andy',)####('IMA',)####('Ansari',)####('RMcG',)####('James Stanley',)####('James Stanley',)####('PEV',)####('Chris',)####('Thomas',)####('fonnesbeck',)####('Simen Gaure',)####('Bill',)####('Yves',)####('amair',)####('Adam Hafdahl',)####('Oeufcoque Penteano',)####('avg',)####('Tomek Tarczynski',)####('kirk',)####('Shimmy',)####('Shimmy',)####('Jean-Baptiste Camps',)####('Jean-Baptiste Camps',)####('kirk',)####('ghb',)####('Marco',)####('ghb',)####('Paul Hiemstra',)####('Roji',)####('user979',)####('James Stanley',)####('EngrStudent',)####('kmonynam',)####('Ojtwist',)####('Tim',)####('Martin M\u00e4chler',)####('Scott',)####('Ray Koopman',)####('Sangcheol Choi',)####('drw',)####('Tim',)####('Michael I.',)####('omatai',)####('AIB',)####('Dra. Alejandra Echeverria',)####('CCL',)####('DocBuckets',)####('Stijn',)####('kirk',)####('drsnyder',)####('Bill',)####('Tim',)####('Markus Loecher',)####('David',)####('tfunk',)####('Stijn',)####('IMA',)####('julieth',)####('SGd',)####('SGd',)####('thenickdude',)####('Chris',)####('MtS',)####('thenickdude',)####('Viktor',)####('Pat',)####('Gob00st',)####('Pat',)####('Ivanov',)####('remo',)####('tiantianchen',)####('paul',)####('Chris',)####('Tran Son Hai',)####('Daniel Big',)####('Yihui',)####('Val',)####('IMA',)####('user1205901',)####('wvguy8258',)####('non-numeric_argument',)####('Anne',)####('ReliableResearch',)####('user21626',)####('felize2000',)####('paul',)####('bruce',)####('user2380022',)####('bruce',)####('Maxim.K',)####('ptay89',)####('user16789',)####('John',)####('thebigdog',)####('luciano',)####('Alexander Measure',)####('Alexander Measure',)####('Jayne',)####('verbsintransit',)####('thebigdog',)####('Matteo De Felice',)####('Placidia',)####('workglide',)####('D. Amberti',)####('Kalman',)####('Placidia',)####('mat',)####('atiretoo',)####('omatai',)####('AlefSin',)####('Vincent Labatut',)####('IMA',)####('kirk',)####('Placidia',)####('EngrStudent',)####('kirk',)####('mrgloom',)####('Matteo Fasiolo',)####('CrossValidatedTrading',)####('nutty about natty',)####('IMA',)####('Francisco Arceo',)####('Azula R.',)####('chandler',)####('gogurt',)####('IMA',)####('EngrStudent',)####('Shaun Lippy',)####('Flounderer',)####('Paul',)####('Philip C',)####('Jim Garrison',)####('kjo',)####('Ran',)####('Jan Hlavacek',)####('user1121352',)####('user20650',)####('Manuel',)####('Azula R.',)####('JBK',)####('JBK',)####('IMA',)####('DocBuckets',)####('zgall1',)####('zgall1',)####('user20650',)####('Stephen',)####('user1121352',)####('Evan Aad',)####('b2amen',)####('Manuel',)####('Urukec',)####('Pgibas',)####('Fixed Point',)####('Ricky Demer',)####('John',)####('Charlotte Houwing',)####('Damien',)####('Pgibas',)####('Thomas',)####('Eric Paulsson',)####('Xander',)####('Matthew Gertner',)####('Fortranner',)####('Thomas',)####('Manuel',)####('user26979',)####('Shea Parkes',)####('rmalouf',)####('nonsleepr',)####('Tom',)####('user1912925',)####('Corey Hoffstein',)####('Corey Hoffstein',)####('jellybean',)####('user1234440',)####('sam',)####('Ilmari Karonen',)####('statquant',)####('Hamman Samuel',)####('Jorge Banuelos',)####('S. Punky',)####('Nico',)####('nbubis',)####('Kloser Cheung',)####('b2amen',)####('Michael Holman',)####('b2amen',)####('Fazliddin',)####('Lucozade',)####('EngrStudent',)####('thagzone',)####('Teague',)####('thagzone',)####('New Alexandria',)####('dassouki',)####('WoA',)####('Tim',)####('Val',)####('Jorge Banuelos',)####('alex',)####('Thraupidae',)####('user27531',)####('user27436',)####('Spacedman',)####('GeorgeMcDowd',)####('Yves',)####('RAH',)####('Yves',)####('Chthonic Project',)####('user27606',)####('HaveF',)####('Stef van Buuren',)####('Stef van Buuren',)####('Stef van Buuren',)####('Stef van Buuren',)####('Flounderer',)####('Flounderer',)####('Flounderer',)####('bioinformatician',)####('mzuba',)####('GeorgeMcDowd',)####('jp134711',)####('EngrStudent',)####('Indolering',)####('Marius',)####('user27736',)####('EngrStudent',)####('Val',)####('Lucozade',)####('user27768',)####('Ivana',)####('kjo',)####('kjo',)####('Tim',)####('gizgok',)####('user1189053',)####('Siddharth Gopal',)####('Siddharth Gopal',)####('Siddharth Gopal',)####('Ivan Oseledets',)####('Matteo',)####('user27564',)####('Chris',)####('Ant',)####('Kronos',)####('IMA',)####('Ant',)####('Ant',)####('ReliableResearch',)####('Johnny Jones',)####('noumenal',)####('Frank',)####('user27115',)####('James',)####('Johnny Jones',)####('EngrStudent',)####('omatai',)####('Arrigo Benedetti',)####('Copuleros',)####('philchalmers',)####('Arrigo Benedetti',)####('user27564',)####('Klaus',)####('Joe',)####('anxoestevez',)####('Stijn',)####('Klaus',)####('user22478',)####('anxoestevez',)####('Joe',)####('nan',)####('Ivanov',)####('RStudent',)####('user22478',)####('Mustard',)####('sets',)####('Kaushik Ghose',)####('Zhenglei',)####('PEV',)####('Arrigo Benedetti',)####('semibruin',)####('Ray Koopman',)####('Azeem',)####('Francisco Arceo',)####('Walter',)####('Walter',)####('EngrStudent',)####('Jeffrey Evans',)####('Ray Koopman',)####('Chris',)####('atrichornis',)####('tiantianchen',)####('Marloes',)####('Michael',)####('blue-sky',)####('anonymous_4322',)####('user28246',)####('Kolibris',)####('PhDstudent',)####('anxoestevez',)####('porktom',)####('Thor',)####('semibruin',)####('James',)####('Dan',)####('semibruin',)####('ustroetz',)####('James Stanley',)####('Flounderer',)####('blue-sky',)####('atrichornis',)####('Carl',)####('joint_p',)####('Tim',)####('reseter',)####('Produnis',)####('oncearunner',)####('hplieninger',)####('hplieninger',)####('giordano',)####('PEV',)####('PEV',)####('Tim',)####('Alberto Bacchelli',)####('Thursdays Coming',)####('Thursdays Coming',)####('Flounderer',)####('hplieninger',)####('Aghila',)####('Ray Koopman',)####('dardisco',)####('Bill Simpson',)####('Ray Koopman',)####('Herman Haugland',)####('user1315305',)####('figure',)####('Thain',)####('user2625800',)####('Paul Keating',)####('user34790',)####('tshauck',)####('dbliss',)####('IMA',)####('Jack Maney',)####('Thomas',)####('dylan2106',)####('DavidP',)####('semibruin',)####('dbliss',)####('wondering',)####('semibruin',)####('semibruin',)####('PGreen',)####('Manuel',)####('pushpen',)####('K_scheduler',)####('Copuleros',)####('Azeem',)####('Manuel',)####('Chris_P',)####('The Photon',)####('The Photon',)####('Ray Koopman',)####('PeterRabbit',)####('Ray Koopman',)####('diwgan32',)####('Drazick',)####('EngrStudent',)####('Learner',)####('Nikana Reklawyks',)####('Azeem',)####('Bene',)####('Bene',)####('Thomas',)####('PeterRabbit',)####('Ray Koopman',)####('Thomas',)####('EngrStudent',)####('Stephen Herschkorn',)####('user31820',)####('TomAugspurger',)####('Uwat',)####('user28805',)####('Stephen Herschkorn',)####('Dan',)####('user28859',)####('Tim',)####('EngrStudent',)####('Patrick Caldon',)####('Andrew Pandre',)####('myusuf3',)####('orizon',)####('sppc42',)####('Error404',)####('Robert Harvey',)####('James Stanley',)####('Error404',)####('vincitus',)####('luckyi',)####('forecaster',)####('TrueTears',)####('James Stanley',)####('Viplav Babu',)####('galactica',)####('chrisfs',)####('chrisfs',)####('danielle',)####('David Folksman',)####('David Folksman',)####('momeara',)####('James Stanley',)####('chrisfs',)####('Jens Kouros',)####('momeara',)####('James',)####('Jubbles',)####('EngrStudent',)####('James',)####('hplieninger',)####('A.M.',)####('Fred S',)####('Dimitri B',)####('Jens Kouros',)####('Silverfish',)####('user29242',)####('mark step',)####('Azeem',)####('beejay',)####('anaximander',)####('qtasse',)####('Robert Jones',)####('Mike Nute',)####('Cassandra Gelvin',)####('Ray Koopman',)####('CT Zhu',)####('EdM',)####('hplieninger',)####('hplieninger',)####('Sepehr',)####('SS_11',)####('user34790',)####('Mariam',)####('Robbie',)####('Cagdas Ozgenc',)####('elcodedocle',)####('Christiaan Kruger',)####('Christiaan Kruger',)####('user29532',)####('elcodedocle',)####('Azeem',)####('Azeem',)####('tmakino',)####('Ray Koopman',)####('Cesare Camestre',)####('Flounderer',)####('Allan',)####('JAW',)####('Eldar Agalarov',)####('Tom',)####('Ray Koopman',)####('Ray Koopman',)####('Tom',)####('Sophie',)####('Andy',)####('Trevor',)####('Ariel',)####('john mangual',)####('Fabio Beltramini',)####('Arne',)####('Drake',)####('Drake',)####('roberttdev',)####('Ray Koopman',)####('Paul Igor Costea',)####('user12719',)####('Arthur G',)####('user20650',)####('Dimitris',)####('Tevfik Aytekin',)####('needlesslosses',)####('Samo Jerom',)####('Vass',)####('hplieninger',)####('hong',)####('Simen Gaure',)####('user1983395',)####('Kurt',)####('tuw',)####('Nate',)####('Sklivvz',)####('Sklivvz',)####('Bill',)####('Sklivvz',)####('Simone',)####('James Stanley',)####('julieth',)####('World Engineer',)####('Joseph',)####('Simone',)####('Robert Smith',)####('Yves',)####('James',)####('user001',)####('Jean-Claude Arbaut',)####('julieth',)####('kwela12',)####('Frank',)####('EngrStudent',)####('Christoph_J',)####('Lasse V. Karlsen',)####('Ray Koopman',)####('Niru',)####('hw.fu',)####('Faheem Mitha',)####('Niru',)####('Bill',)####('Mihai Todor',)####('user1893354',)####('Walrus the Cat',)####('PSS',)####('pontikos',)####('zkurtz',)####('Boris',)####('tomasz74',)####('Tomer Elbaum',)####('Robert Smith',)####('user1172468',)####('zx8754',)####('sam',)####('drsnyder',)####('Mark K Cowan',)####('Buck',)####('Bill',)####('Aly',)####('Gino Strato',)####('Martin Van der Linden',)####('Gino Strato',)####('PGreen',)####('Arun Jose',)####('panos',)####('panos',)####('Xochitl C.',)####('Chris Fisher',)####('Chris Fisher',)####('user30490',)####('user30490',)####('Jeff',)####('Adam Hafdahl',)####('CT Zhu',)####('Pravesh Parekh',)####('Pravesh Parekh',)####('Mr Renard',)####('SPI',)####('Mr Renard',)####('Gorayni',)####('yazan',)####('phubaba',)####('wa4557',)####('Nick',)####('jank',)####('dardisco',)####('jank',)####('RickyB',)####('Noah Snyder',)####('varin sacha',)####('nan',)####('soufanom',)####('Angelo',)####('Robert Smith',)####('Sarah',)####('Christoph_J',)####('Mark Lakata',)####('Mike McCoy',)####('jerome',)####('jerome',)####('Error404',)####('blub85',)####('Mike McCoy',)####('user30438',)####('user30438',)####('user30574',)####('nightcracker',)####('Dave Babbitt',)####('Eudora',)####('Mike McCoy',)####('Tom',)####('zkurtz',)####('Nick',)####('Brandon',)####('Error404',)####('zbicyclist',)####('zbicyclist',)####('Nik',)####('nominator',)####('Alfred M.',)####('varin sacha',)####('Eldan',)####('Martin Van der Linden',)####('ilprincipe',)####('Mike McCoy',)####('Mike McCoy',)####('Arthur Fischer',)####('Ian Stuart',)####('Mike McCoy',)####('cohoz',)####('Ray Koopman',)####('Mike McCoy',)####('Alby',)####('user16168',)####('tony',)####('EngrStudent',)####('Andrius',)####('user',)####('Frize',)####('jank',)####('DarcyThomas',)####('Robert Smith',)####('ssantic',)####('mwjohnson',)####('david',)####('davidav',)####('Christian',)####('Matthew',)####('Mike McCoy',)####('Mike McCoy',)####('Sush',)####('Martyn',)####('cerd',)####('cerd',)####('Cupitor',)####('semibruin',)####('Fredrik Bonander',)####('dylan2106',)####('Ray Koopman',)####('Anderson',)####('Arushi',)####('Christian Watteng\u00e5rd',)####('Bill',)####('deong',)####('user31228',)####('EdM',)####('Martin Drozdik',)####('zkurtz',)####('Flounderer',)####('Abraham D Flaxman',)####('wwwslinger',)####('Ridhima',)####('alex',)####('oblixram',)####('DistribEcology',)####('AsymLabs',)####('Theja',)####('Laura',)####('Thomas',)####('John',)####('tom cunningham',)####('LCialdella',)####('carlosedubarreto',)####('htrahdis',)####('Islam El-Nabarawy',)####('Animesh Pandey',)####('zkurtz',)####('sds',)####('Alex',)####('oblixram',)####('zkurtz',)####('abousetta',)####('zkurtz',)####('Alex',)####('user1068636',)####('Theja',)####('user2763575',)####('Anton',)####('HMLAZIO',)####('jank',)####('Theja',)####('Anton Ashanin',)####('Flounderer',)####('Pat',)####('zkurtz',)####('Ray Koopman',)####('Henrik',)####('Tania',)####('Bill',)####('Max S.',)####('Trevor',)####('AsymLabs',)####('ankit',)####('Zoran',)####('Ray Koopman',)####('zx8754',)####('Bradford',)####('user30490',)####('BonScott',)####('Sean Owen',)####('Sean Owen',)####('Don Reba',)####('Ziofil',)####('Sentry',)####('KF Harlock',)####('Robert Jones',)####('htrahdis',)####('JohnK',)####('Sue',)####('Stef van Buuren',)####('Bill',)####('Lams',)####('noah',)####('Robert Jones',)####('Ray Koopman',)####('EdM',)####('prop',)####('cathy',)####('avi',)####('Sentry',)####('Bill',)####('Sam Dickson',)####('JohnK',)####('SabreWolfy',)####('nomen',)####('user2925487',)####('Josh',)####('Josh',)####('Marco',)####('Ethan',)####('pat',)####('Bill',)####('Bill',)####('hr0nix',)####('tree',)####('Josh',)####('user32039',)####('htrahdis',)####('Josh',)####('guillefix',)####('daniellopez46',)####('user32038',)####('hr0nix',)####('ConfEco',)####('Spy_Lord',)####('EdM',)####('Silverfish',)####('Giancarlo',)####('Spy_Lord',)####('Simone',)####('Willie Wong',)####('Cagdas Ozgenc',)####('dardisco',)####('user32197',)####('user30438',)####('Silverfish',)####('Arun Jose',)####('Niru',)####('Silverfish',)####('Oleg Melnikov',)####('Ray Koopman',)####('Christos',)####('Ray Koopman',)####('TheBigAmbiguous',)####('Silverfish',)####('digdeep',)####('Oliver',)####('Bill',)####('Bart',)####('Jerry Schirmer',)####('Brian Borchers',)####('Faheem Mitha',)####('Tarek ',)####('Chan-Ho Suh',)####('user32454',)####('trev',)####('Silverfish',)####('Onawa',)####('Flask',)####('Silverfish',)####('SamtheBrand',)####('user32454',)####('user32454',)####('Chan-Ho Suh',)####('user34577',)####('Glen Wheeler',)####('Blain Waan',)####('POTENZA',)####('user2598356',)####('e-sushi',)####('Robert Jones',)####('Bill',)####('Flask',)####('Habi',)####('Sebastien',)####('Ray Koopman',)####('poison Alien',)####('wvguy8258',)####('alfa',)####('Manuel',)####('HeidelbergSlide',)####('Flask',)####('jank',)####('Cagdas Ozgenc',)####('trev',)####('Christopher Louden',)####('Bill',)####('daniellopez46',)####('wvguy8258',)####('dmeu',)####('Gilbert',)####('Cagdas Ozgenc',)####('Hal',)####('user37950',)####('James LI',)####('Leo',)####('chtfn',)####('Cagdas Ozgenc',)####('user34967',)####('user34967',)####('Cupitor',)####('Martin Roberts',)####('martin',)####('jank',)####('Bill',)####('gmravi2003',)####('sharky',)####('user50222',)####('Flask',)####('Szabolcs',)####('jmbejara',)####('Bill',)####('nic',)####('Cagdas Ozgenc',)####('htrahdis',)####('Emilio Calvano',)####('Doug',)####('Cagdas Ozgenc',)####('CamBioinformatics',)####('user1754610',)####('user1984',)####('chandler',)####('zbicyclist',)####('TrueTears',)####('Ray Koopman',)####('John',)####('David',)####('Flask',)####('Placidia',)####('Ray Koopman',)####('Placidia',)####('Cagdas Ozgenc',)####('JohnK',)####('JohnK',)####('JohnK',)####('JohnK',)####('JohnK',)####('user1624577',)####('Mike',)####('Mike',)####('thecity2',)####('RStudent',)####('Pepto',)####('Eddie',)####('tytamu',)####('DP1981',)####('vibez_well',)####('Darren Cook',)####('pual ambagher',)####('Martin Drozdik',)####('Thomas',)####('Thomas',)####('shyamupa',)####('harry',)####('Stephen Henderson',)####('UwF',)####('user3048944',)####('Jacques Wainer',)####('Shariff',)####('Ray Koopman',)####('Potato',)####('Potato',)####('tomka',)####('Michel G',)####('RedSirius',)####('Andreea',)####('tomka',)####('tomka',)####('Flask',)####('Flask',)####('Flask',)####('t t ',)####('Analyst',)####('Matteo Fasiolo',)####('Matteo Fasiolo',)####('user2598356',)####('Simone',)####('tomka',)####('ztl',)####('James Phillips',)####('Vojtech R.',)####('BielsNohr',)####('pat',)####('ssobczak',)####('Juan A. Navarro',)####('rhkarls',)####('JohnK',)####('Cagdas Ozgenc',)####('vrios',)####('Potato',)####('Compay Segundo',)####('Atticus29',)####('Sachin_ruk',)####('user20650',)####('David Z',)####('clarkson',)####('luciano',)####('Matthias Studer',)####('sarikan',)####('paul',)####('Julian',)####('Hibernating',)####('Babyburger',)####('feder80',)####('daknowles',)####('David Speyer',)####('Madhu',)####('Nicola Dinapoli',)####('user3075205',)####('mojovski',)####('Scott Chamberlain',)####('Scott Chamberlain',)####('mojovski',)####('tomka',)####('Frank Jansen',)####('user35965',)####('Adam Daily',)####('Sebastian Lehmann',)####('Silverfish',)####('RedSirius',)####('Nicola Dinapoli',)####('Karoly Horvath',)####('Deamonpog',)####('Sylverdrag',)####('Nicola Dinapoli',)####('Flask',)####('user671931',)####('James Prichard',)####('Christian',)####('TARehman',)####('Sedi',)####('JohnK',)####('seinus',)####('jank',)####('jank',)####('Learner',)####('tomka',)####('Brendon',)####('EdM',)####('phils',)####('user30438',)####('Eduardo',)####('Eduardo',)####('Simon',)####('Hibernating',)####('ExpectoPatronum',)####('Eduardo',)####('user36438',)####('Wrzlprmft',)####('Kaveh',)####('user111297',)####('David Z',)####('doctorate',)####('Steffie',)####('stachyra',)####('Chris',)####('MrROY',)####('Eduardo',)####('PeterRabbit',)####('James Stanley',)####('David Gibbs',)####('dmartin',)####('Bosley',)####('Creatron',)####('denis',)####('RegressForward',)####('Germaniawerks',)####('Hibernating',)####('PeterRabbit',)####('loganecolss',)####('vqv',)####('loganecolss',)####('Brendon',)####('tomka',)####('tomka',)####('tomka',)####('v1520',)####('Germaniawerks',)####('dwstu',)####('Mateusz Kowalski',)####('Mike Shi',)####('Jenny',)####('loganecolss',)####('EdM',)####('Jenny',)####('Rob Berkes',)####('agondiken',)####('zbicyclist',)####('SciPioneer',)####('Phil Schumm',)####('dwstu',)####('cyborg',)####('Germaniawerks',)####('Germaniawerks',)####('Anton',)####('user3119058',)####('jruizaranguren',)####('jruizaranguren',)####('jruizaranguren',)####('Jean V. Adams',)####('colinfang',)####('Rohit Chatterjee',)####('Matteo Fasiolo',)####('Jlange8',)####('ExpectoPatronum',)####('martin',)####('SPi',)####('user36830',)####('Andris Birkmanis',)####('Bill',)####('Matteo De Felice',)####('SPi',)####('Subhash Chander Paul',)####('tomka',)####('JohnK',)####('Saulius Lukauskas',)####('Hibernating',)####('Christian',)####('Carlo Lazzaro',)####('jruizaranguren',)####('Matteo Fasiolo',)####('clarkson',)####('Saulius Lukauskas',)####('tomka',)####('Tomek Tarczynski',)####('user2575760',)####('lovekesh',)####('Matteo Fasiolo',)####('user1893354',)####('Jose G',)####('Duuuusty',)####('Flounderer',)####('dmartin',)####('traggatmot',)####('user2840286',)####('ProdigySim',)####('tomka',)####('JohnK',)####('Zado',)####('JohnK',)####('Jean V. Adams',)####('Hibernating',)####('Jean V. Adams',)####('mcb',)####('Jason Morgan',)####('traggatmot',)####('dmartin',)####('Ojtwist',)####('option_select',)####('option_select',)####('user3060702',)####('juanpablo',)####('Accidental Statistician',)####('dmartin',)####('Matteo Fasiolo',)####('nigelc',)####('wxffles',)####('vqv',)####('Ali',)####('Ali',)####('Ali',)####('Ali',)####('Ali',)####('sayth',)####('while',)####('munichgrizzly',)####('Accidental Statistician',)####('dmartin',)####('Bill',)####('JohnK',)####('tomka',)####('JohnK',)####('Jean V. Adams',)####('Jazzmine',)####('tomka',)####('RStudent',)####('Uri Cohen',)####('Kaly',)####('user37134',)####('ExpectoPatronum',)####('elsa',)####('elsa',)####('interested',)####('David M W Powers',)####('user2575760',)####('Hibernating',)####('faew',)####('Matteo Fasiolo',)####('jruizaranguren',)####('Eleven-Eleven',)####('AmeliaBR',)####('AmeliaBR',)####('Artos',)####('Jirka-x1',)####('AlefSin',)####('Cho Sinhee',)####('Jean V. Adams',)####('Balduz',)####('Michael',)####('alsocasey',)####('Michal J. Figurski',)####('MHH',)####('Jean V. Adams',)####('Xavier Labouze',)####('Michal J. Figurski',)####('Yves Daoust',)####('Defershu',)####('user20227',)####('Defershu',)####('VF1',)####('MHH',)####('ignorant',)####('Analyst',)####('dardisco',)####('dominic',)####('sarahr',)####('Parag S. Chandakkar',)####('Abhimanyu Arora',)####('Ketan',)####('Matteo Fasiolo',)####('user30490',)####('John',)####('POD',)####('Barnaby',)####('Samuel Benidt',)####('user36612',)####('user36612',)####('user114618',)####('T_D',)####('RegressForward',)####('Final Litiu',)####('Final Litiu',)####('toto_tico',)####('Abhimanyu Arora',)####('user2175783',)####('Rishi Dua',)####('George',)####('Simone',)####('Matteo Fasiolo',)####('Barnaby',)####('Naveen',)####('Matthias Studer',)####('John Richardson',)####('Carl',)####('Manuel',)####('TSP',)####('TSP',)####('John',)####('Bill',)####('Brett Phinney',)####('Trevor Alexander',)####('user37646',)####('user37646',)####('dmartin',)####('jwg',)####('jwg',)####('Brian Diggs',)####('Bill',)####('Bill',)####('aiguofer',)####('david25272',)####('bsg',)####('Vincent Guillemot',)####('John',)####('Gordon',)####('Corey Sparks',)####('Corey Sparks',)####('RobertF',)####('Samuel Benidt',)####('Fabio Beltramini',)####('Adrian',)####('david25272',)####('SamtheBrand',)####('DRiftingONg',)####('MCP_infiltrator',)####('Bill',)####('Vincent Guillemot',)####('Bobson',)####('Pierre',)####('user1477388',)####('DavidShor',)####('DavidShor',)####('Tiberiu-Ionu\u021b Stan',)####('DavidShor',)####('Brian Borchers',)####('syed mohsin',)####('RSMax',)####('Brian Borchers',)####('yuk',)####('Joe DF',)####('vzn',)####('Zhi Zhao',)####('Yogesh Pandey',)####('pkofod',)####('Christian',)####('vzn',)####('pkofod',)####('tomka',)####('David',)####('scruffpalmer',)####('paul',)####('Evgeni Sergeev',)####('G M',)####('Jeff',)####('TobyEvans',)####('TobyEvans',)####('Bernardo',)####('user37695',)####('Fischer',)####('BeyondProgrammer',)####('pkofod',)####('tucson',)####('Matteo Fasiolo',)####('pkofod',)####('PeterRabbit',)####('Bernardo',)####('kasterma',)####('Eric Morgan',)####('Quaker',)####('Quaker',)####('Quaker',)####('Jeffrey Blattman',)####('benjamin jarcuska',)####('old-ufo',)####('Dr. Mike',)####('Anne van Rossum',)####('random_guy',)####('WiseStrawberry',)####('Unwisdom',)####('user131983',)####('Wynn',)####('Placidia',)####('Livid',)####('Stijn',)####('Clair Crossupton',)####('Yves Daoust',)####('NG_21',)####('tomka',)####('JohnK',)####('Remy F',)####('CraigMilligan',)####('JohnK',)####('Clair Crossupton',)####('user1489497',)####('Brett Phinney',)####('James Stanley',)####('Nepze Tyson',)####('user1578653',)####('jO.',)####('tristan',)####('jO.',)####('Eduardo',)####('Ian',)####('Stijn',)####('user3269',)####('zkurtz',)####('Robert Jones',)####('Sarah Celestin',)####('user995',)####('tomka',)####('Madushani',)####('david25272',)####('l0b0',)####('Tom',)####('Sam Dickson',)####('Hibernating',)####('Hibernating',)####('mojovski',)####('AmeliaBR',)####('RoyalTS',)####('Maxim.K',)####('SlimJim',)####('SlimJim',)####('Jacob',)####('dmartin',)####('Daniel Gee',)####('while',)####('JC22',)####('zgall1',)####('Jeff Snider',)####('Jeff Snider',)####('zgall1',)####('Gevorg',)####('Arrigo Benedetti',)####('Emme',)####('user1505202',)####('Arrigo Benedetti',)####('user29898',)####('Germaniawerks',)####('RossXV',)####('user1449306',)####('Maroon',)####('Diego',)####('user123276',)####('Lucas11',)####('Analyst',)####('Analyst',)####('Kaveh',)####('JohnK',)####('aseem',)####('Creatron',)####('Richard Herron',)####('Mariam',)####('romsdocs',)####('lucacerone',)####('scruffpalmer',)####('Bill',)####('Bill',)####('Unwisdom',)####('ahburr',)####('Francesco',)####('ap53',)####('Francesco',)####('Andomar',)####('Hibernating',)####('user12719',)####('user39707',)####('loganecolss',)####('Ben Voigt',)####('nicefella',)####('nicefella',)####('Paddy3118',)####('deroby',)####('Accidental Statistician',)####('mithunsatheesh',)####('Paddy3118',)####('Skirmantas',)####('nmclean',)####('BigHomie',)####('BigHomie',)####('Mika\u00ebl Mayer',)####('Dmitri',)####('Helenave',)####('nmclean',)####('chloe',)####('RemcoGerlich',)####('akappa',)####('akappa',)####('RemcoGerlich',)####('Chris Lively',)####('RemcoGerlich',)####('MrWonderful',)####('Kyle Strand',)####('Kyle Strand',)####('Brilliand',)####('Kyle Strand',)####('broc.seib',)####('BigHomie',)####('nmclean',)####('RobertF',)####('kbelder',)####('rocketsarefast',)####('Fakrudeen',)####('Brilliand',)####('Muhd',)####('Chris Lively',)####('nmclean',)####('Mariano Su\u00e1rez-Alvarez',)####('Flanfl',)####('Sylvain',)####('Ark-kun',)####('Cruncher',)####('Cruncher',)####('Cruncher',)####('Jonathan Van Matre',)####('Dimiter',)####('david25272',)####('Sam',)####('Panos',)####('lightalchemist',)####('Cruncher',)####('Mona Jalal',)####('Leon-Alph',)####('Leon-Alph',)####('A.Birdman',)####('Ari',)####('Flounderer',)####('MikeK',)####('user39531',)####('erasmortg',)####('Germaniawerks',)####('Paul M',)####('IcannotFixThis',)####('Parul Kathuria',)####('Hibernating',)####('Sumedh',)####('Ayan',)####('Gina',)####('mamahuhu',)####('Manuel',)####('J. C. Leit\u00e3o',)####('Pat',)####('John Jiang',)####('John Jiang',)####('Yves Daoust',)####('Don Diego',)####('John Jiang',)####('user1275515',)####('user1726633',)####('random_guy',)####('mt0',)####('mt0',)####('Chris Janjigian',)####('Baumann',)####('Flounderer',)####('Alan Moraes',)####('david25272',)####('jinawee',)####('Francesco',)####('TrueTears',)####('Uri Cohen',)####('fxm',)####('Edward Armstrong',)####('A A',)####('Anko',)####('DavidR',)####('PeterRabbit',)####('Danny',)####('bash',)####('RobertF',)####('Pat',)####('user40541',)####('user40541',)####('random_guy',)####('Josh Dillon',)####('biz14',)####('Shepherd',)####('Danielle',)####('Samuel',)####('Apopei Andrei Ionut',)####('Chamberlain Foncha',)####('Chamberlain Foncha',)####('Tim',)####('Hibernating',)####('tristan',)####('AmeliaBR',)####('user40767',)####('AdrienS',)####('Larry Wasserman',)####('BartoszKP',)####('BartoszKP',)####('MegPophealth',)####('user1800340',)####('k6adams',)####('Peter H',)####('user13107',)####('anna-earwen',)####('bigTree',)####('Bowler',)####('Ellen Marshall',)####('user3288202',)####('Emil Friedman',)####('James Stanley',)####('fipelle',)####('qoheleth',)####('ccsv',)####('user1817709',)####('tristan',)####('Superbest',)####('Andrew Cassidy',)####('gjabel',)####('BigHomie',)####('Dino Abraham',)####('Danny',)####('Paul',)####('Marta',)####('Paul',)####('user40991',)####('Andrew Klaassen',)####('Carl Witthoft',)####('MikeP',)####('hoof_hearted',)####('feetwet',)####('Jonas',)####('DoctorAmbient',)####('Alexander Serebrenik',)####('Andrew Klaassen',)####('user3120266',)####('user39531',)####('Andrew Klaassen',)####('Andrew Klaassen',)####('Biomath',)####('Andrew Klaassen',)####('susan',)####('while',)####('Germaniawerks',)####('jchristie',)####('Sean',)####('random_user',)####('tristan',)####('user41196',)####('Woodstock',)####('Szabolcs',)####('Eric Brady',)####('Stefan Walter',)####('P Schnell',)####('Ashkan',)####('afsdf dfsaf',)####('John',)####('ssah',)####('biologue',)####('biologue',)####('biologue',)####('dave',)####('ssah',)####('user1275515',)####('eliavs',)####('Tom Minka',)####('GreatEyes',)####('Andrew',)####('julieth',)####('Jonathan',)####('Pam',)####('user5054',)####('Andrew Cassidy',)####('luciano',)####('user295338',)####('Aaron',)####('Dmitry Laptev',)####('Tom Minka',)####('Tom Minka',)####('Tom Minka',)####('Marshall',)####('susie',)####('P Schnell',)####('John',)####('Yilun Zhang',)####('Chamberlain Foncha',)####('julieth',)####('user1287161',)####('tool.ish',)####('Tom Minka',)####('a11msp',)####('NothingsImpossible',)####('AmeliaBR',)####('P Schnell',)####('Tyler S',)####('Kunjan Kshetri',)####('Ryan',)####('Tom Minka',)####('susie',)####('user2932774',)####('sawobo',)####('B.Mr.W.',)####('Silverfish',)####('guestom',)####('Emilie',)####('Emilie',)####('user41723',)####('Vincent Labatut',)####('brichins',)####('ptay89',)####('David Starkey',)####('ChallengeResponse',)####('k6adams',)####('JohnAllen',)####('user7064',)####('Optimesh',)####('tool.ish',)####('Casebash',)####('luciano',)####('ChallengeResponse',)####('gerrit',)####('gerrit',)####('aslum',)####('Emilie',)####('P Schnell',)####('JohnAllen',)####('mlowry',)####('mlowry',)####('John',)####('John',)####('mookid',)####('rudi0086021',)####('user2157668',)####('elexhobby',)####('Emilie',)####('Will.W',)####('Steve Jessop',)####('tristan',)####('Andrew',)####('rudimuse',)####('Druss2k',)####('tristan',)####('RobertF',)####('Pedro.Alonso',)####('Davor',)####('Francisco Noriega',)####('Francisco Noriega',)####('mookid',)####('ExpectoPatronum',)####('Mariya',)####('user42040',)####('Christian Sauer',)####('Dingo13',)####('Abu Zabi',)####('Jacek Podlewski',)####('Yuanning',)####('Yuanning',)####('Flounderer',)####('maple_shaft',)####('Xitrum',)####('user3288202',)####('Iain Elder',)####('Eitan',)####('Aleksandr Blekh',)####('Szabolcs',)####('JupiterM104',)####('JupiterM104',)####('Revious',)####('Pinocchio',)####('Donbeo',)####('tool.ish',)####('mrkprc1',)####('Nathan Cooper',)####('John Yetter',)####('Nathan Cooper',)####('Nathan Cooper',)####('nil',)####('Jean-Paul',)####('Tyro',)####('xyzzy',)####('Gnattuha',)####('Ilmari Karonen',)####('Indolering',)####('hoof_hearted',)####('juliohm',)####('leonardo',)####('leonardo',)####('fxm',)####('hrbrmstr',)####('tristan',)####('tdo123',)####('HueSX',)####('John',)####('wildetudor',)####('anthr',)####('Jake Burkhead',)####('Nicola',)####('Henrik',)####('Carl Witthoft',)####('Carl Witthoft',)####('user001',)####('while',)####('Tom Lane',)####('Sam Dickson',)####('Sam Dickson',)####('rrpp',)####('user42628',)####('Rufo',)####('leonardo',)####('luciano',)####('J. C. Leit\u00e3o',)####('elexhobby',)####('vector07',)####('EngrStudent',)####('AYD',)####('Feral Oink',)####('RobertF',)####('Julien Couvreur',)####(\"Matt O'Brien\",)####('user1205901',)####('bigTree',)####('philchalmers',)####('ido',)####('user1205901',)####('TCSGrad',)####('vector07',)####('ido',)####('aginensky',)####('Sam Dickson',)####('Chit',)####('Twilight Sparkle',)####('GrimSqueaker',)####('Dan Bryant',)####('Livid',)####('Blake Mitchell',)####('uha1',)####('Mike Izbicki',)####('sparc_spread',)####('abousetta',)####('Jayen',)####('Livid',)####('David Richerby',)####('Frank P.',)####('Epaminondas',)####('Livid',)####('deatheatersay',)####('user42835',)####('Mike',)####('Jas Max',)####('ATJ',)####('vector07',)####('Jas Max',)####('Peteris',)####('vector07',)####('Roberto Ferrer',)####('user1320502',)####('RobertF',)####('Nan',)####('Chris',)####('Chris',)####('rlkrlk',)####('Willemien',)####('poison Alien',)####('Henrik',)####('queenbee',)####('Pinocchio',)####('orizon',)####('Szabolcs',)####('user43424',)####('confused guy',)####('confused guy',)####('rohitbernanke',)####('rohitbernanke',)####('KitFox',)####('KitFox',)####('RegDwight',)####('RobertF',)####('EngrStudent',)####('Milena Araujo',)####('Talha',)####('Eros Ram',)####('Fabio Beltramini',)####('Simon Vandekar',)####('Donnie',)####('askming',)####('mrkm-a',)####('user2314405',)####('tomka',)####('tomka',)####('Sergio Parreiras',)####('queenbee',)####('Eric Lippert',)####('Adrian',)####('Ben',)####('alberto',)####('Nathaniel Payne',)####('Danielle',)####('Steve Jessop',)####('philchalmers',)####('JFA',)####('Zborvo',)####('RobertF',)####('eric',)####('philchalmers',)####('Nathan Cooper',)####('integral',)####('David M W Powers',)####('IcannotFixThis',)####('114',)####('Adrian',)####('Adrian',)####('Tim S.',)####('integral',)####('Richard Tingle',)####('LBushkin',)####('Gabe',)####('Ben Hocking',)####('Mobius Pizza',)####('Koba',)####('the_WaterKey',)####('blue-sky',)####('Noah',)####('Drizzt',)####('user1205901',)####('Gabe',)####('Richard Tingle',)####('while',)####('Aghila',)####('landroni',)####('Tito Candelli',)####('Daniel Shestakov',)####('Steve Jessop',)####('Vincent',)####('vikkor',)####('Mike Nute',)####('sds',)####('Xodarap',)####('Joe',)####('kamula',)####('Steve Jessop',)####('hobbs',)####('JohnK',)####('statsRus',)####('Anonymous',)####('JohnK',)####('Julian Schuessler',)####('vagabond',)####('Noel',)####('Someone',)####('orizon',)####('user1275515',)####('Bob',)####('John',)####('Simon Raper',)####('user1357015',)####('Ilmari Karonen',)####('Chamberlain Foncha',)####('Gravitino',)####('Thomas',)####('JohnK',)####('Wojciech Walczak',)####('Matt',)####('Dan',)####('user44394',)####('Simon Raper',)####('The_Cthulhu_Kid',)####('eipi10',)####('eipi10',)####('Ryan Bressler',)####('Superbest',)####('stachyra',)####('Bill',)####('stachyra',)####('RobertF',)####(\"Kieran O'Neill\",)####('biggob1',)####('David Richerby',)####('loganecolss',)####('adam.r',)####('biggob1',)####('user333700',)####('O.S.',)####('Ryan Bressler',)####('Hao Ye',)####('Roberto Ferrer',)####('loganecolss',)####('philchalmers',)####('stats566',)####('ilir',)####('Katz',)####('Hernan',)####('user1275515',)####('tomka',)####('Chamberlain Foncha',)####('patricio',)####('P Schnell',)####('Hector',)####('user1275515',)####('Epaminondas',)####('user227710',)####('Xodarap',)####('Adrian',)####('Adrian',)####('innominate227',)####('Peteris',)####('Peteris',)####('Peteris',)####('ryouma',)####('user3378649',)####('Oscar  Flores',)####('Ryan',)####('user13907',)####('user44786',)####('Bill',)####('Py-ser',)####('dshaw',)####('Meadowlark Bradsher',)####('gammapoint',)####('mmuurr',)####('Zoran Loncarevic',)####('EngrStudent',)####('queenbee',)####('Kevin',)####('EngrStudent',)####('user1949752',)####('Belov',)####('Natalia Zo\u0144',)####('May Pi',)####('testuser',)####('Hao Ye',)####('Epaminondas',)####('Epaminondas',)####('Epaminondas',)####('gammapoint',)####('Matt',)####('Brian Borchers',)####('Cobbles',)####('Chris',)####('user3604078',)####('Chris',)####('Zhang Tschao',)####('A.Chakraborty',)####('Amit Moscovich Eiger',)####('Hao Ye',)####('thebigdog',)####('Thomas',)####('Tom\u00e1s M.',)####('Evgenii Nikitin',)####('jjepsuomi',)####('user43579',)####('user43579',)####('ceiling',)####('ichangkim',)####('DaveH',)####('Evgenii Nikitin',)####('Ilmari Karonen',)####('KDM',)####('ceiling',)####('Chuck N',)####('cjohnson318',)####('Mittenchops',)####('find-missing-semicolon',)####('Curious',)####('user1593755',)####('ceiling',)####('Bill',)####('Richard Scriven',)####('Bill',)####('Sam Dickson',)####('Sergio',)####('Jas Max',)####('Livius',)####('user3612505',)####('Sergio',)####('hoyem',)####('user146950',)####('vessilli',)####('kozooh',)####('kozooh',)####('jibounet',)####('Aghila',)####('Placidia',)####('Jimmy Sawczuk',)####('Tom Lane',)####('Fly by Night',)####('beroe',)####('garychung',)####('Thomas Browne',)####('FTan',)####('FTan',)####('user3008056',)####('Ufuk Can Bi\u00e7ici',)####('Chamberlain Foncha',)####('Chamberlain Foncha',)####('Fly by Night',)####('queenbee',)####('Joe',)####('user1827356',)####('queenbee',)####('Sergio',)####('Sergio',)####('Sergio',)####('Sergio',)####('caseyr547',)####('anna-earwen',)####('EagleV_Attnam',)####('mmk',)####('Brian Borchers',)####('dazed_confused',)####('Sergio',)####('Mr.Cat',)####('Pinocchio',)####('Pinocchio',)####('drstevok',)####('Hao Ye',)####('Pinocchio',)####('Placidia',)####('dazed_confused',)####('Hannes Planatscher',)####('Chamberlain Foncha',)####('Adrian',)####('Brian Borchers',)####('user45607',)####('Eric',)####('Sergio',)####('Brian Borchers',)####('Manuel',)####('davips',)####('Federico',)####('jhg',)####('jhg',)####('rumtscho',)####('Georg',)####('cwyers',)####('Sergio',)####('random_user',)####('Sergio',)####('Steven',)####('Sergio',)####('Sergio',)####('Yakkanomica',)####('Yakkanomica',)####('Yakkanomica',)####('phil12',)####('user90476',)####('Wiebke',)####('nrussell',)####('Eric Lippert',)####('loganecolss',)####('Wiebke',)####('Eoin',)####('PA6OTA',)####('pedrofigueira',)####('angelo',)####('Floris',)####('JohnK',)####('PA6OTA',)####('June',)####('JohnK',)####('Alexey',)####('Jose Maria Gomez Hidalgo',)####('Jose Maria Gomez Hidalgo',)####('stats-hb',)####('user20637',)####('Sergio',)####('alyst',)####('Aaron',)####('user45826',)####('Paul Staab',)####('Sergio',)####('user20637',)####('user45825',)####('Germaniawerks',)####('Sergio',)####('philchalmers',)####('bab5139',)####('bab5139',)####('loganecolss',)####('Floris',)####('pgnelson',)####('Sergio',)####('Sergio',)####('Sergio',)####('jf328',)####('deong',)####('Jack Aidley',)####('Eddie Sanders',)####('M A',)####('beginneR',)####('pedrofigueira',)####('AdrienNK',)####('Oxinabox',)####('Germaniawerks',)####('EdB',)####('felbo',)####('felbo',)####('Roberto Ferrer',)####('Donbeo',)####('MHH',)####('pedrofigueira',)####('Donbeo',)####('pedrofigueira',)####('Chamberlain Foncha',)####('pedrofigueira',)####('MHH',)####('Giancarlo',)####('mattnedrich',)####('mattnedrich',)####('Floris',)####('user39618',)####('Wrzlprmft',)####('a11msp',)####('Floris',)####('sebastian-c',)####('orthopolis',)####('Placidia',)####('Nikos M.',)####('Sachin_ruk',)####('serakfalcon',)####('Shirish Kumar',)####('pavid',)####('keshlam',)####('bmciv',)####('confuser',)####('confuser',)####('smci',)####('nicko',)####('Shoaibkhanz',)####('bmciv',)####('gueststata',)####('Flounderer',)####('Flounderer',)####('alberto',)####('Epaminondas',)####('JohnK',)####('Brian Borchers',)####('JackMack',)####('Ben',)####('hrbrmstr',)####('Sherry',)####('Placidia',)####('RyanB',)####('Placidia',)####('pedrofigueira',)####('cboettig',)####('horse hair',)####('Sergio',)####('Brian Borchers',)####('RubenGeert',)####('logc',)####('RubenGeert',)####('mugen',)####('Placidia',)####('Arun Jose',)####('horse hair',)####('pedrofigueira',)####('Placidia',)####('Sergio',)####('Dzung Nguyen',)####('Alex',)####('Philipp',)####('crotchet_rest',)####('Placidia',)####('JohnK',)####('cossatot',)####('James',)####('Vidar S. Ramdal',)####('tpg2114',)####('Duncan',)####('pedrofigueira',)####('jtolle',)####('cboettig',)####('Arbias Hashani',)####('Spork',)####('RedSirius',)####('Ben Voigt',)####('stata',)####('stata',)####('philchalmers',)####('Ron',)####('Kingstat',)####('thinly veiled question mark',)####('Bach',)####('Placidia',)####('Placidia',)####('MHH',)####('hyde',)####('Yulong',)####('Lagerbaer',)####('user20650',)####('JohnK',)####('PA6OTA',)####('AP13',)####('Pat',)####('user123675',)####('tashuhka',)####('mathfemi',)####('nick',)####('sebastianb',)####('Edward Newell',)####('Matt',)####('Michael',)####('MichaelJ',)####('MichaelJ',)####('Julien D.',)####('benjamin jarcuska',)####('MichaelJ',)####('Alice',)####('Orestis Tsinalis',)####('user2575760',)####('Louis Hugues',)####('Louis Hugues',)####('Hao Ye',)####('Epaminondas',)####('dlj',)####('Jack Aidley',)####('MichaelJ',)####('MichaelJ',)####('dlj',)####('user48266',)####('Simone',)####('user46697',)####('user48238',)####('Puzzled',)####('Sideshow Bob',)####('MichaelJ',)####('Meadowlark Bradsher',)####('Cruncher',)####('blahdiblah',)####('renrenthehamster',)####('Simone',)####('John Babson',)####('John Babson',)####('user4673',)####('antecessor',)####('JohnK',)####('paul',)####('John',)####('Brandon Liu',)####('114',)####('Brian P',)####('Adrian',)####('renrenthehamster',)####('Adrian',)####('Adrian',)####('user1987097',)####('Brian P',)####('Brandon Liu',)####('Szabolcs',)####('Mark T Patterson',)####('Netface',)####('nsl',)####('user1379351',)####('Placidia',)####('Joz',)####('Joz',)####('Meadowlark Bradsher',)####('EngrStudent',)####('JohnK',)####('mat',)####('John Manak',)####('MHH',)####('Flounderer',)####('Meadowlark Bradsher',)####('user48773',)####('Placidia',)####('beginneR',)####('Yves Daoust',)####('Livius',)####('JohnK',)####('EngrStudent',)####('Sarunas',)####('Ben',)####('Michael K',)####('cnosam',)####('user1205197',)####('Placidia',)####('tool.ish',)####('user3646666',)####('Stefan Hansen',)####('Davidkuyt',)####('suzee',)####('nrussell',)####('Brian Borchers',)####('Joe',)####('Aurelie',)####('Epaminondas',)####('post-hoc',)####('post-hoc',)####('Hao Ye',)####('Hao Ye',)####('Stefan Hansen',)####('Joe',)####('Pat',)####('Pat',)####('The Scrum Meister',)####('blochwave',)####('Walter white',)####('Voo',)####('Mr. Radical',)####('Marcus Ritt',)####('Meadowlark Bradsher',)####('user3777456',)####('hydrologist',)####('maddy',)####('cwharland',)####('Donnie',)####('114',)####('Pete',)####('javlacalle',)####('Ana',)####('paul',)####('javlacalle',)####('javlacalle',)####('Dennis',)####('Dennis',)####('user49069',)####('Fimba',)####('petrivan',)####('Stefan Hansen',)####('pushpen.paul',)####('Stefan Hansen',)####('Stefan Hansen',)####('Meadowlark Bradsher',)####('Michelle',)####('Stefan Hansen',)####('user49105',)####('Placidia',)####('focusitall',)####('dadrivr',)####('ved',)####('David Arenburg',)####('Gene Arboit',)####('Duncan',)####('P Schnell',)####('Daniel Lee',)####('David Arenburg',)####('David Arenburg',)####('sebastianb',)####('ved',)####('Ali-Jena',)####('4everlearning',)####('Joe',)####('ved',)####('gavenkoa',)####('GST95',)####('keshlam',)####('user43790',)####('Christian Sauer',)####('Eric C',)####('ved',)####('reson',)####('Philip Adler',)####('JohnK',)####('Raphael',)####('Museful',)####('javlacalle',)####('Meadowlark Bradsher',)####('Tomm',)####('ErikL',)####('AlexGenkin',)####('nrussell',)####('Sergio',)####('i_shoot_photos',)####('Theja',)####('Filippo',)####('OFish',)####('user1474074',)####('Joe',)####('user49440',)####('emain90',)####('Mark T Patterson',)####('JohnK',)####('Yehoshaphat Schellekens',)####('RStudent',)####('Aaron',)####('user49598',)####('OFish',)####('user25574',)####('Kirill',)####('4everlearning',)####('javlacalle',)####('Druss2k',)####('Dennis',)####('sb415',)####('Gene Ekster',)####('felix',)####('Flounderer',)####('Dennis',)####('Dennis',)####('student330247324',)####('anthr',)####('fsmart',)####('SUBHABRATA',)####('student330247324',)####('Zhang Tschao',)####('Aurelie',)####('user20637',)####('Josh',)####('user3255064',)####('Voo',)####('Ryan Bressler',)####('qoheleth',)####('Inger',)####('Bill',)####('Emil Friedman',)####('Bill Raynor',)####('Bill',)####('ubongo',)####('PseudoRandom',)####('Dennis',)####('Dennis',)####('Tromb',)####('Dennis',)####('Dennis',)####('Adrian',)####('Hao Ye',)####('Dan',)####('Dennis',)####('svmguy',)####('PseudoRandom',)####('javlacalle',)####('EngrStudent',)####('Jen',)####('EngrStudent',)####('user3722736',)####('nrussell',)####('imran.fanaswala',)####('random_guy',)####('Corey Sparks',)####('cotsapas',)####('j-kahn',)####('Andrew',)####('Stefan Hansen',)####('user697110',)####('EngrStudent',)####('Elizabeth',)####('khan',)####('Keith',)####('javlacalle',)####('Brandon Sherman',)####('skitnik',)####('Theodore Norvell',)####('Kate',)####('Minkoo Seo',)####('tomka',)####('JeffDror',)####('Brian Borchers',)####('Inga',)####('Andrew',)####('Dennis',)####('rafa',)####('user9171',)####('user8264',)####('Natalie',)####('javlacalle',)####('Keith',)####('FraserOfSmeg',)####('wildetudor',)####('Keith',)####('nil',)####('user20637',)####('John Steedman',)####('David',)####('Ferra Xu',)####('Keith',)####('Ria George',)####('blz',)####('UW Will',)####('javlacalle',)####('wildetudor',)####('a11msp',)####('Gianluca',)####('Soni',)####('Jacques Wainer',)####('Matt',)####('Farhan Shariff',)####('NotNotLogical',)####('TonyMorland',)####('EngrStudent',)####('Aaron Novstrup',)####('Eoin',)####('GreySwordz',)####('user3826556',)####('LittleBobbyTables',)####('Marcela',)####('JeffM',)####('Aaron Novstrup',)####('Octopus',)####('Lawrence Chernin',)####('Simone',)####('Arun Jose',)####('Theja',)####('Leaf',)####('David Richerby',)####('Aaron',)####('user30490',)####('RobinLovelace',)####('RStudent',)####('Alex Houser',)####('Masato Nakazawa',)####('Marcin Korn',)####('Sid',)####('John Wickerson',)####('Stefan Hansen',)####('Stefan Hansen',)####('TMOTTM',)####('wildetudor',)####('TMOTTM',)####('bfs1990',)####('FredikLAa',)####('zkurtz',)####('John',)####('zkurtz',)####('felix',)####('user2941526',)####('Frank49',)####('Patrick',)####('Uri K.',)####('Alessandro Beretta',)####('Stacy',)####('traggatmot',)####('bison2178',)####('Thomas',)####('traggatmot',)####('andrewniesen',)####('alexfernandez',)####('John',)####('ajhubb',)####('David Z',)####('Ali-Jena',)####('alexfernandez',)####('Batool',)####('Andrew M',)####('Druss2k',)####('statsnewb',)####('Misakov',)####('Masato Nakazawa',)####('Not_Grothendieck',)####('Milena Araujo',)####('Milena Araujo',)####('Christian Sauer',)####('TonyMorland',)####('Joshua',)####('Tamas Ferenci',)####('Andrew M',)####('Masato Nakazawa',)####('Sid',)####('user3402296',)####('Michael',)####('Antony C',)####('M.P.',)####('Iceberg Slim',)####('Iceberg Slim',)####('that_one_girl',)####('Lachos',)####('greymatter0',)####('JKP',)####('Dennis',)####('Stacy',)####('Arun Jose',)####('trev',)####('aldorado',)####('Sid',)####('cinekj',)####('cinekj',)####('KH Kim',)####('pthao',)####('trev',)####('user2422566',)####('Tamas Ferenci',)####('Dan',)####('Remi D',)####('Aaron Contreras',)####('user29836',)####('Analyst',)####('Tamas Ferenci',)####('JolJols',)####('hplieninger',)####('user54038',)####('user2991243',)####('Dennis',)####('teeglaze',)####('teeglaze',)####('teeglaze',)####('teeglaze',)####('ap235711',)####('Dan',)####('Dennis',)####('Emory Leon',)####('The Thunder Chimp',)####('David Melkuev',)####('Levon',)####('Masato Nakazawa',)####('Tom Lane',)####('Masato Nakazawa',)####('EricaN',)####('user30490',)####('user30490',)####('Nate',)####('qoheleth',)####('MLaz',)####('Tamas Ferenci',)####('etov',)####('Vincent Guillemot',)####('user51972',)####('Manuel',)####('Dan',)####('Gael Varoquaux',)####('kenorb',)####('gregor',)####('overflowname',)####('P Schnell',)####('dobiwan',)####('Roberto Ferrer',)####('JRMGarcia',)####('JohnK',)####('Munchausen',)####('EdM',)####('Steve Sailer',)####('blochwave',)####('JohnK',)####('Aleksandr Blekh',)####('Aleksandr Blekh',)####('Aleksandr Blekh',)####('Guilherme Kenji Chihaya',)####('sefi',)####('Jacques Wainer',)####('Adam Robinsson',)####('PickledZebra',)####('Vincent Guillemot',)####('Mark Miller',)####('feelfree',)####('ShannonC',)####('David Melkuev',)####('Fixed Point',)####('nbubis',)####('Karen',)####('Fixed Point',)####('hoof_hearted',)####('Vincent Guillemot',)####('Hack-R',)####('Hack-R',)####('David Blei',)####('Bryan Glazer',)####('Robert Kubrick',)####('lilster',)####('Funn Me',)####('pes',)####('Funn Me',)####('Funn Me',)####('user54876',)####('ffriend',)####('ffriend',)####('Finn \u00c5rup Nielsen',)####('Livid',)####('areyoujokingme',)####('Dennis',)####('higgsss',)####('higgsss',)####('user92612',)####('Giiovanna',)####('Dennis',)####('Donbeo',)####('Faisal',)####('EngrStudent',)####('rambles',)####('monojohnny',)####('Bobby Newmark',)####('Ryan Simmons',)####('thelatemail',)####('caseyr547',)####('higgsss',)####('higgsss',)####('higgsss',)####('higgsss',)####('EngrStudent',)####('Thomas',)####('Blue Marker',)####('supercat',)####('higgsss',)####('Maurizio',)####('Giiovanna',)####('swmo',)####('John',)####('Paul',)####('kindadolf',)####('Stijn',)####('dobiwan',)####('jpcgandre',)####('Donbeo',)####('hlx98007',)####('PSS',)####('hlx98007',)####('hlx98007',)####('Laura',)####('Chris Redford',)####('Yehoshaphat Schellekens',)####('JohnK',)####('user55417',)####('Mahbubul Majumder',)####('Masato Nakazawa',)####('Tim',)####('Marco',)####('a.arfe',)####('Nate Eldredge',)####('Majid alDosari',)####('Majid alDosari',)####('SocioMatt',)####('hobbs',)####('user20637',)####('Emrah Dolguns\u00f6z',)####('ffriend',)####('Ayalew A.',)####('ypnos',)####('Livius',)####('Srishti M',)####('jarfa',)####('EngrStudent',)####('coanil',)####('Tom Minka',)####('Kees Mulder',)####('EngrStudent',)####('EngrStudent',)####('thistleknot',)####('jpcgandre',)####('MickMack',)####('Tom Minka',)####('Robert Smith',)####('Daniel',)",
        "base_pg_sql": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0",
        "base_question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.",
        "base_evidence": "DownVotes = 0; Score BETWEEN 1 and 5",
        "pre_pg_sql": "\n          CREATE TABLE FilteredUserComments (\n                  DisplayName TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE FilteredUserComments;",
        "gt": {
            "type": "insert",
            "table": "FilteredUserComments",
            "columns": [
                "DisplayName"
            ],
            "values": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0"
        }
    },
    {
        "question_id": 290,
        "db_id": "toxicology",
        "question": "Insert all distinct toxic elements found in the molecule TR151 into the ToxicElementsInTR151 table.",
        "evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "difficulty": "challenging",
        "pg_sql": "INSERT INTO ToxicElementsInTR151 (element) SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "result_size": 5,
        "result": "('c',)####('h',)####('n',)####('pb',)####('s',)",
        "base_pg_sql": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'",
        "base_question": "Which toxic element can be found in the molecule TR151?",
        "base_evidence": "element = 'cl' means Chlorine; element = 'c' means Carbon; element = 'h' means Hydrogen; element = 'o' means Oxygen, element = 's' means Sulfur; element = 'n' means Nitrogen, element = 'p' means Phosphorus, element = 'na' means Sodium, element = 'br' means Bromine, element = 'f' means Fluorine; element = 'i' means Iodine; element = 'sn' means Tin; element = 'pb' means Lead; element = 'te' means Tellurium; element = 'ca' means Calcium",
        "pre_pg_sql": "\n          CREATE TABLE ToxicElementsInTR151 (\n                  element TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE ToxicElementsInTR151;",
        "gt": {
            "type": "insert",
            "table": "ToxicElementsInTR151",
            "columns": [
                "element"
            ],
            "values": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR151'"
        }
    },
    {
        "question_id": 1407,
        "db_id": "student_club",
        "question": "Insert the budget IDs of the top three budgets for Advertisement category with the highest allocated amounts into the TopAdvertisementBudgets table.",
        "evidence": "MAX(amount) where category = 'Advertisement'",
        "SQL": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC LIMIT 3",
        "difficulty": "simple",
        "pg_sql": "INSERT INTO TopAdvertisementBudgets (budget_id) SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC NULLS LAST LIMIT 3",
        "result_size": 3,
        "result": "('recvKTAWAFKkVNnXQ',)####('recFZ47e0eVqcQD9O',)####('rec0QmEc3cSQFQ6V2',)",
        "base_pg_sql": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC NULLS LAST LIMIT 3",
        "base_question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?",
        "base_evidence": "MAX(amount) where category = 'Advertisement'",
        "pre_pg_sql": "\n          CREATE TABLE TopAdvertisementBudgets (\n                  budget_id TEXT\n          );\n          ",
        "post_pg_sql": "DROP TABLE TopAdvertisementBudgets;",
        "gt": {
            "type": "insert",
            "table": "TopAdvertisementBudgets",
            "columns": [
                "budget_id"
            ],
            "values": "SELECT budget_id FROM budget WHERE category = 'Advertisement' ORDER BY amount DESC NULLS LAST LIMIT 3"
        }
    }
]